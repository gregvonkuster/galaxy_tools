# To find out if anything is running on port 8080 and 8081
netstat -antp | grep 8080
netstat -antp | grep 8081

# ===============================================================
# Open ports 8080 and 8081 to public
# ===============================================================

ufw allow from any to any port 8080 proto tcp
ufw allow from any to any port 8081 proto tcp

# ===============================================================
# Perform all of the following as root (use sudo -iu root).  This
# assumes # you are installing Python in /usr/local/bin,
# /usr/local/lib, etc # since the system Python is install in
# /usr/bin, /usr/lib, etc
# ===============================================================

# Make sure what version of the OS we are running
cat /etc/*release

# ===============================================================
# Upgrade the system
# ===============================================================
apt-get update

# Install development tools
apt-get install build-essential

# Check installed gcc version as a test.
gcc --version

# Install additional handy development tools
apt-get install zlib1g-dev libssl-dev libsqlite3-dev libbz2-dev

# Install Python 3 pip.
apt install python3-pip

# Define the following aliases for later steps.
alias pip="/usr/bin/pip3"
alias python="/usr/bin/python3"

# ===============================================================
# Install virtualenv
# ===============================================================
pip install virtualenv

# ===============================================================
# Install git
# ===============================================================
apt install git

# ===============================================================
# Install munge
# ===============================================================
# Create the global users
# Slurm and Munge require consistent UID and GID across every
# node in the cluster.  For all the nodes, before you install
# Slurm or Munge:

export MUNGEUSER=991
groupadd -f -g $MUNGEUSER munge
useradd  -m -c "MUNGE Uid 'N' Gid Emporium" -d /var/lib/munge -u $MUNGEUSER -g munge  -s /sbin/nologin munge
export SLURMUSER=992
groupadd -f -g $SLURMUSER slurm
useradd  -m -c "SLURM workload manager" -d /var/lib/slurm -u $SLURMUSER -g slurm  -s /bin/bash slurm
apt-get install munge libmunge-dev

apt install rng-tools
rngd -r /dev/urandom

systemctl enable munge
systemctl start munge

# Test munge
munge -n

# ===============================================================
# Install slurm
# see https://slurm.schedmd.com/quickstart_admin.html
# ===============================================================
apt-get install slurm-wlm

# Do some checking for proper installation.
vim /lib/systemd/system/slurmctld.service
vim /lib/systemd/system/slurmd.service
ll /etc/slurm-llnl
dpkg -L slurm-wlm-doc

# ===============================================================
# Create the slurm config file by visiting
# http://slurm.schedmd.com/configurator.easy.html
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.
# Note that machine name is case sensitive!!
# ===============================================================
# Use slurmd -C on a node to generate configuration information
# for that particular node, and add use that to create the slurm.conf file.

# slurm.conf file generated by configurator easy.html.
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.
#
ControlMachine=gol
ControlAddr=128.118.137.127
#
#MailProg=/bin/mail
MpiDefault=none
#MpiParams=ports=#-#
ProctrackType=proctrack/cgroup
ReturnToService=1
SlurmctldPidFile=/var/run/slurm-llnl/slurmctld.pid
#SlurmctldPort=6817
SlurmdPidFile=/var/run/slurm-llnl/slurmd.pid
#SlurmdPort=6818
SlurmdSpoolDir=/var/lib/slurm-llnl/slurmd
SlurmUser=slurm
#SlurmdUser=root
StateSaveLocation=/var/lib/slurm-llnl/slurmctld
SwitchType=switch/none
TaskPlugin=task/none
#
#
# TIMERS
#KillWait=30
#MinJobAge=300
#SlurmctldTimeout=120
#SlurmdTimeout=300
#
#
# SCHEDULING
FastSchedule=1
SchedulerType=sched/backfill
SelectType=select/cons_res
SelectTypeParameters=CR_CPU
#
#
# LOGGING AND ACCOUNTING
AccountingStorageType=accounting_storage/none
ClusterName=cluster
#JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/none
#SlurmctldDebug=3
SlurmctldLogFile=/var/log/slurm-llnl/slurmctld.log
#SlurmdDebug=3
SlurmdLogFile=/var/log/slurm-llnl/slurmd.log
#
#
# COMPUTE NODES
NodeName=gol NodeAddr=127.0.0.1 CPUs=8 State=UNKNOWN
PartitionName=debug Nodes=gol Default=YES MaxTime=INFINITE State=UP

# ===============================================================
# Copy the file from the form and place it in /etc/slurm-llnl/slurm.conf
# ===============================================================

# ===============================================================
# Make sure directories are writable by the slurm user for all process id files, log files, etc
# ===============================================================
mkdir /var/spool/slurmctld
chown slurm /var/spool/slurmctld
chmod 755 /var/spool/slurmctld
touch /var/log/slurm-llnl/slurmd.log
chown slurm /var/log/slurm-llnl/slurmd.log
touch /var/log/slurm-llnl/slurmctld.log
chown slurm /var/log/slurm-llnl/slurmctld.log
touch /var/spool/slurmctld/job_state
chown slurm /var/spool/slurmctld/job_state
touch /var/log/slurm_jobacct.log
touch /var/log/slurm_jobcomp.log
chown slurm /var/log/slurm_jobacct.log
chown slurm /var/log/slurm_jobcomp.log

# ===============================================================
# Make sure /usr/local/etc/cgroup.conf exists
# ===============================================================
cat /usr/local/etc/cgroup.conf 
###
# Slurm cgroup /usr/local/etc/cgroup.conf support configuration file
###
CgroupMountpoint="/sys/fs/cgroup"
CgroupAutomount=yes
CgroupReleaseAgentDir="/etc/slurm-llnl/cgroup"
AllowedDevicesFile="/etc/slurm-llnl/cgroup_allowed_devices_file.conf"
ConstrainCores=no
TaskAffinity=no
ConstrainRAMSpace=yes
ConstrainSwapSpace=no
ConstrainDevices=no
AllowedRamSpace=100
AllowedSwapSpace=0
MaxRAMPercent=100
MaxSwapPercent=100
MinRAMSpace=30

# ===============================================================
# Make sure slurm is configured properly
# ===============================================================
systemctl enable slurmd.service && systemctl enable slurmctld.service
systemctl start slurmd.service && systemctl start slurmctld.service
slurmd -c

# ===============================================================
# Download slurm-drmaa by following the instructions here
# https://github.com/natefoo/slurm-drmaa
# ===============================================================

apt install software-properties-common
add-apt-repository ppa:natefoo/slurm-drmaa
apt-get update
apt install slurm-drmaa-dev

# ===============================================================
# Install Postgres
# https://www.digitalocean.com/community/tutorials/how-to-install-and-use
# ===============================================================
apt install postgresql postgresql-contrib

vim /etc/postgresql/12/main/pg_hba.conf
# Find the lines that looks like this, near the bottom of the file:
pg_hba.conf excerpt (original)
host    all             all             127.0.0.1/32            ident
host    all             all             ::1/128                 ident

# Then replace "ident" with "md5", so they look like this:
pg_hba.conf excerpt (updated)
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 md5
# Save and exit - now Postgresql is configured to allow password authentication.

# ===============================================================
# Start and enable Postgresql
# ===============================================================
systemctl start postgresql
systemctl enable postgresql

# ===============================================================
# Create the “galaxy” account
# ===============================================================
adduser galaxy
# Make the passowrd for the galaxy account to be "galaxy".
passwd galaxy

# ===============================================================
# Perform all of the following as the “postgres” user (sudo -iu postgres)
# ===============================================================
# Add the “galaxy” user, allowing it to create / drop databases
sudo -iu postgres
createuser --interactive
Enter name of role to add: galaxy
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) y
Shall the new role be allowed to create more new roles? (y/n) n
# Make the password for the postgres user to be "postgres"
psql
alter user postgres password 'postgres';
# Make the password for the galaxy user to be "galaxy"
alter user galaxy password 'galaxy';

# ===============================================================
# Perform all of the following as the “galaxy” user (sudo -iu galaxy)
# ===============================================================

# Make sure PATH points to the correct Python
# Install galaxy
# Activate the Galaxy virtual env (.venv)
# Make sure using correct Python 3 and pip
pip install supervisor
pip install drmaa

