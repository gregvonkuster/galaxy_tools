# When committing this file, make sure to run make config-rebuild to rebuild
# all sample YAML and RST files, and add those to your commit.
type: map
desc: |
  Galaxy is configured by default to be usable in a single-user development
  environment.  To tune the application for a multi-user production
  environment, see the documentation at:

   https://docs.galaxyproject.org/en/master/admin/production.html

  Throughout this sample configuration file, except where stated otherwise,
  uncommented values override the default if left unset, whereas commented
  values are set to the default value.  Relative paths are relative to the root
  Galaxy directory.

  Examples of many of these options are explained in more detail in the Galaxy
  Community Hub.

    https://galaxyproject.org/admin/config

  Config hackers are encouraged to check there before asking for help.
mapping:
  uwsgi: !include uwsgi_schema.yml
  galaxy:
    type: map
    required: true
    mapping:

      config_dir:
        type: str
        required: false
        desc: |
          The directory that will be prepended to relative paths in options specifying
          other Galaxy config files (e.g. datatypes_config_file). Defaults to the
          directory in which galaxy.yml is located.

      data_dir:
        type: str
        required: false
        desc: |
          The directory that will be prepended to relative paths in options specifying
          Galaxy data/cache directories and files (such as the default SQLite database,
          file_path, etc.). Defaults to `database/` if running Galaxy from source or
          `<config_dir>/data` otherwise.

      database_connection:
        type: str
        required: false
        desc: |
          By default, Galaxy uses a SQLite database at '<data_dir>/universe.sqlite'.  You
          may use a SQLAlchemy connection string to specify an external database
          instead.

          Sample default 'sqlite:///<data_dir>/universe.sqlite?isolation_level=IMMEDIATE'

      database_engine_option_pool_size:
        type: int
        default: 5
        required: false
        desc: |
          If the server logs errors about not having enough database pool connections,
          you will want to increase these values, or consider running more Galaxy
          processes.

      database_engine_option_max_overflow:
        type: int
        default: 10
        required: false
        desc: |
          If the server logs errors about not having enough database pool connections,
          you will want to increase these values, or consider running more Galaxy
          processes.

      database_engine_option_pool_recycle:
        type: int
        default: -1
        required: false
        desc: |
          If using MySQL and the server logs the error "MySQL server has gone away",
          you will want to set this to some positive value (7200 should work).

      database_engine_option_server_side_cursors:
        type: bool
        default: false
        required: false
        desc: |
          If large database query results are causing memory or response time issues in
          the Galaxy process, leave the result on the server instead.  This option is
          only available for PostgreSQL and is highly recommended.

      database_query_profiling_proxy:
        type: bool
        default: false
        required: false
        desc: |
          Log all database transactions, can be useful for debugging and performance
          profiling.  Logging is done via Python's 'logging' module under the qualname
          'galaxy.model.orm.logging_connection_proxy'

      database_template:
        type: str
        required: false
        desc: |
          If auto-creating a postgres database on startup - it can be based on an existing
          template database. This will set that. This is probably only useful for testing but
          documentation is included here for completeness.

      database_log_query_counts:
        type: bool
        default: false
        required: false
        desc: |
          Log number of SQL queries executed and total time spent dispatching SQL statements for
          each web request. If statsd is also enabled this information will be logged there as well.
          This should be considered somewhat experimental, we are unsure of the performance costs of
          running this in production. This is useful information for optimizing database interaction
          performance. Similar information can be obtained on a per-request basis by enabling the
          sql_debug middleware and adding sql_debug=1 to a request string.

      slow_query_log_threshold:
        type: float
        default: 0.0
        required: false
        desc: |
          Slow query logging.  Queries slower than the threshold indicated below will
          be logged to debug.  A value of '0' is disabled.  For example, you would set
          this to .005 to log all queries taking longer than 5 milliseconds.

      enable_per_request_sql_debugging:
        type: bool
        default: false
        required: false
        desc: |
          Enables a per request sql debugging option. If this is set to true,
          append ?sql_debug=1 to web request URLs to enable detailed logging on
          the backend of SQL queries generated during that request. This is
          useful for debugging slow endpoints during development.

      install_database_connection:
        type: str
        required: false
        desc: |
          By default, Galaxy will use the same database to track user data and
          tool shed install data.  There are many situations in which it is
          valuable to separate these - for instance bootstrapping fresh Galaxy
          instances with pretested installs.  The following option can be used to
          separate the tool shed install database (all other options listed above
          but prefixed with install_ are also available).

          Defaults to the value of the 'database_connection' option.

      corals_database_connection:
        type: str
        default: postgresql://postgres:postgres@localhost/stag
        required: false
        desc: |
          Complementaty database to support CoralSNP Galaxy instance.

      database_auto_migrate:
        type: bool
        default: false
        required: false
        desc: |
          Setting the following option to true will cause Galaxy to automatically
          migrate the database forward after updates. This is not recommended for production
          use.

      database_wait:
        type: bool
        default: false
        required: false
        desc: |
          Wait for database to become available instead of failing immediately.

      database_wait_attempts:
        type: int
        default: 60
        required: false
        desc: |
          Number of attempts before failing if database_wait is enabled.

      database_wait_sleep:
        type: float
        default: 1.
        required: false
        desc: |
          Time to sleep between attempts if database_wait is enabled (in seconds).

      file_path:
        type: str
        default: files
        path_resolves_to: data_dir
        required: false
        desc: |
          Where dataset files are stored. It must be accessible at the same path on any cluster
          nodes that will run Galaxy jobs, unless using Pulsar.

      new_file_path:
        type: str
        default: tmp
        path_resolves_to: data_dir
        required: false
        desc: |
          Where temporary files are stored. It must be accessible at the same path on any cluster
          nodes that will run Galaxy jobs, unless using Pulsar.

      tool_config_file:
        type: any
        default: config/tool_conf.xml
        required: false
        desc: |
          Tool config files, defines what tools are available in Galaxy.
          Tools can be locally developed or installed from Galaxy tool sheds.
          (config/tool_conf.xml.sample will be used if left unset and
          config/tool_conf.xml does not exist). Can be a single file, a list of
          files, or (for backwards compatibility) a comma-separated list of files.

      shed_tool_config_file:
        type: str
        default: shed_tool_conf.xml
        required: false
        desc: |
          Tool config file for tools installed from the Galaxy Tool Shed. Must
          be writable by Galaxy and generally should not be edited by hand. In
          older Galaxy releases, this file was part of the tool_config_file
          option. It is still possible to specify this file (and other
          shed-enabled tool config files) in tool_config_file, but in the
          standard case of a single shed-enabled tool config, this option is
          preferable. This file will be created automatically upon tool
          installation, whereas Galaxy will fail to start if any files in
          tool_config_file cannot be read.

          The value of this option will be resolved with respect to <mutable_config_dir>.

      check_migrate_tools:
        type: bool
        default: false
        required: false
        desc: |
          Enable / disable checking if any tools defined in the above non-shed
          tool_config_files (i.e., tool_conf.xml) have been migrated from the Galaxy
          code distribution to the Tool Shed. This functionality is largely untested
          in modern Galaxy releases and has serious issues such as #7273 and the possibility
          of slowing down Galaxy startup, so the default and recommended value is false.

      migrated_tools_config:
        type: str
        default: migrated_tools_conf.xml
        required: false
        desc: |
          Tool config maintained by tool migration scripts.  If you use the migration
          scripts to install tools that have been migrated to the tool shed upon a new
          release, they will be added to this tool config file.

          The value of this option will be resolved with respect to <mutable_config_dir>.

      integrated_tool_panel_config:
        type: str
        default: integrated_tool_panel.xml
        required: false
        desc: |
          File that contains the XML section and tool tags from all tool panel config
          files integrated into a single file that defines the tool panel layout.  This
          file can be changed by the Galaxy administrator to alter the layout of the
          tool panel.  If not present, Galaxy will create it.

          The value of this option will be resolved with respect to <mutable_config_dir>.

      tool_path:
        type: str
        default: tools
        required: false
        desc: |
          Default path to the directory containing the tools defined in tool_conf.xml.
          Other tool config files must include the tool_path as an attribute in the
          <toolbox> tag.

      tool_dependency_dir:
        type: str
        default: dependencies
        required: false
        desc: |
          Various dependency resolver configuration parameters will have defaults set relative
          to this path, such as the default conda prefix, default Galaxy packages path, legacy
          tool shed dependencies path, and the dependency cache directory.

          Set the string to null to explicitly disable tool dependency handling.
          If this option is set to none or an invalid path, installing tools with dependencies
          from the Tool Shed or in Conda will fail.

          The value of this option will be resolved with respect to <data_dir>.

      dependency_resolvers_config_file:
        type: str
        default: dependency_resolvers_conf.xml
        required: false
        desc: |
          The dependency resolvers config file specifies an ordering and options for how
          Galaxy resolves tool dependencies (requirement tags in Tool XML). The default
          ordering is to the use the Tool Shed for tools installed that way, use local
          Galaxy packages, and then use Conda if available.
          See https://github.com/galaxyproject/galaxy/blob/dev/doc/source/admin/dependency_resolvers.rst
          for more information on these options.

          The value of this option will be resolved with respect to <config_dir>.

      conda_prefix:
        type: str
        required: false
        desc: |
          conda_prefix is the location on the filesystem where Conda packages and environments are
          installed.

          Sample default '<tool_dependency_dir>/_conda'

      conda_exec:
        type: str
        required: false
        desc: |
          Override the Conda executable to use, it will default to the one on the
          PATH (if available) and then to <conda_prefix>/bin/conda

      conda_debug:
        type: bool
        default: false
        required: false
        desc: |
          Pass debug flag to conda commands.

      conda_ensure_channels:
        type: str
        default: iuc,conda-forge,bioconda,defaults
        required: false
        desc: |
          conda channels to enable by default
          (https://conda.io/docs/user-guide/tasks/manage-channels.html)

      conda_use_local:
        type: bool
        default: false
        required: false
        desc: |
          Use locally-built conda packages.

      conda_auto_install:
        type: bool
        default: false
        required: false
        desc: |
          Set to true to instruct Galaxy to look for and install missing tool
          dependencies before each job runs.

      conda_auto_init:
        type: bool
        default: true
        required: false
        desc: |
          Set to true to instruct Galaxy to install Conda from the web automatically
          if it cannot find a local copy and conda_exec is not configured.

      conda_copy_dependencies:
        type: bool
        default: false
        required: false
        desc: |
          You must set this to true if conda_prefix and job_working_directory are not on the same
          volume, or some conda dependencies will fail to execute at job runtime.
          Conda will copy packages content instead of creating hardlinks or symlinks.
          This will prevent problems with some specific packages (perl, R), at the cost
          of extra disk space usage and extra time spent copying packages.

      use_cached_dependency_manager:
        type: bool
        default: false
        required: false
        desc: |
          Certain dependency resolvers (namely Conda) take a considerable amount of
          time to build an isolated job environment in the job_working_directory if the
          job working directory is on a network share.  Set this option to true
          to cache the dependencies in a folder. This option is beta and should only be
          used if you experience long waiting times before a job is actually submitted
          to your cluster.

          This only affects tools where some requirements can be resolved but not others,
          most modern best practice tools can use prebuilt environments in the Conda
          directory.

      tool_dependency_cache_dir:
        type: str
        required: false
        desc: |
          By default the tool_dependency_cache_dir is the _cache directory
          of the tool dependency directory.

          Sample default '<tool_dependency_dir>/_cache'

      precache_dependencies:
        type: bool
        default: true
        required: false
        desc: |
          By default, when using a cached dependency manager, the dependencies are cached
          when installing new tools and when using tools for the first time.
          Set this to false if you prefer dependencies to be cached only when installing new tools.

      tool_sheds_config_file:
        type: str
        default: tool_sheds_conf.xml
        required: false
        desc: |
          File containing the Galaxy Tool Sheds that should be made available to
          install from in the admin interface (.sample used if default does not exist).

          The value of this option will be resolved with respect to <config_dir>.

      watch_tools:
        type: str
        default: 'false'
        required: false
        desc: |
          Monitor the tools and tool directories listed in any tool config file specified in
          tool_config_file option.  If changes are found, tools are automatically reloaded.
          Watchdog ( https://pypi.org/project/watchdog/ ) must be installed and available to Galaxy
          to use this option. Other options include 'auto' which will attempt to watch tools if the
          watchdog library is available but won't fail to load Galaxy if it is not and 'polling'
          which will use a less efficient monitoring scheme that may work in wider range of
          scenarios than the watchdog default.

      watch_job_rules:
        type: str
        default: 'false'
        required: false
        desc: |
          Monitor dynamic job rules. If changes are found, rules are automatically reloaded. Takes
          the same values as the 'watch_tools' option.

      watch_core_config:
        type: str
        default: 'false'
        required: false
        desc: |
          Monitor a subset of options in the core configuration file (See RELOADABLE_CONFIG_OPTIONS
          in lib/galaxy/config/__init__.py).  If changes are found, modified options are
          automatically reloaded. Takes the same values as the 'watch_tools' option.

      watch_tours:
        type: str
        default: 'false'
        required: false
        desc: |
          Monitor the interactive tours directory specified in the 'tour_config_dir' option. If
          changes are found, modified tours are automatically reloaded. Takes the same values as the
          'watch_tools' option.

      legacy_eager_objectstore_initialization:
        type: bool
        default: false
        required: false
        desc: |
          As of 18.09, Galaxy defaults to setting up the object store configuration
          for output datasets during the job queue step in job handlers. This should generally
          provide for more robust job submission, more configurability, and a better
          user experience but may in some cases slightly slow down the job handler job
          setup process. On the off chance that an admin would like to or need to optimize job
          handlers at the expense of user experience and web handling this option will remain
          for some time by setting this option to true. This behavior however should be
          considered deprecated and this option will likely be removed in future versions of
          Galaxy. For more information see https://github.com/galaxyproject/galaxy/issues/6513.

      enable_mulled_containers:
        type: bool
        default: true
        required: false
        desc: |
          Enable Galaxy to fetch containers registered with quay.io generated
          from tool requirements resolved through Conda. These containers (when
          available) have been generated using mulled - https://github.com/mulled.
          Container availability will vary by tool, this option will only be used
          for job destinations with Docker or Singularity enabled.

      containers_resolvers_config_file:
        type: str
        required: false
        desc: |
          Container resolvers configuration (beta). Set up a file describing
          container resolvers to use when discovering containers for Galaxy. If
          this is set to None, the default containers loaded is determined by
          enable_mulled_containers.

      involucro_path:
        type: str
        default: involucro
        required: false
        desc: |
          involucro is a tool used to build Docker or Singularity containers for tools from Conda
          dependencies referenced in tools as `requirement`s. The following path is
          the location of involucro on the Galaxy host. This is ignored if the relevant
          container resolver isn't enabled, and will install on demand unless
          involucro_auto_init is set to false.

          The value of this option will be resolved with respect to <tool_dependency_dir>.

      involucro_auto_init:
        type: bool
        default: true
        required: false
        desc: |
          Install involucro as needed to build Docker or Singularity containers for tools. Ignored if
          relevant container resolver is not used.

      mulled_channels:
        type: str
        default: 'conda-forge,bioconda'
        required: false
        desc: |
          Conda channels to use when building Docker or Singularity containers using involucro.

      enable_tool_shed_check:
        type: bool
        default: false
        required: false
        desc: |
          Enable automatic polling of relative tool sheds to see if any updates
          are available for installed repositories.  Ideally only one Galaxy
          server process should be able to check for repository updates.  The
          setting for hours_between_check should be an integer between 1 and 24.

      hours_between_check:
        type: int
        default: 12
        required: false
        desc: |
          Enable automatic polling of relative tool sheds to see if any updates
          are available for installed repositories.  Ideally only one Galaxy
          server process should be able to check for repository updates.  The
          setting for hours_between_check should be an integer between 1 and 24.

      tool_data_table_config_path:
        type: str
        default: config/tool_data_table_conf.xml
        required: false
        desc: |
          XML config file that contains data table entries for the
          ToolDataTableManager.  This file is manually # maintained by the Galaxy
          administrator (.sample used if default does not exist).

      shed_tool_data_table_config:
        type: str
        default: shed_tool_data_table_conf.xml
        required: false
        desc: |
          XML config file that contains additional data table entries for the
          ToolDataTableManager.  This file is automatically generated based on the
          current installed tool shed repositories that contain valid
          tool_data_table_conf.xml.sample files.  At the time of installation, these
          entries are automatically added to the following file, which is parsed and
          applied to the ToolDataTableManager at server start up.

          The value of this option will be resolved with respect to <mutable_config_dir>.

      tool_data_path:
        type: str
        default: tool-data
        required: false
        desc: |
          Directory where data used by tools is located.  See the samples in that
          directory and the Galaxy Community Hub for help:
          https://galaxyproject.org/admin/data-integration

      shed_tool_data_path:
        type: str
        required: false
        desc: |
          Directory where Tool Data Table related files will be placed when installed from a
          ToolShed. Defaults to the value of the 'tool_data_path' option.

      watch_tool_data_dir:
        type: str
        default: 'false'
        required: false
        desc: |
          Monitor the tool_data and shed_tool_data_path directories. If changes in tool data table
          files are found, the tool data tables for that data manager are automatically reloaded.
          Watchdog ( https://pypi.org/project/watchdog/ ) must be installed and available to Galaxy
          to use this option. Other options include 'auto' which will attempt to use the watchdog
          library if it is available but won't fail to load Galaxy if it is not and 'polling' which
          will use a less efficient monitoring scheme that may work in wider range of scenarios than
          the watchdog default.

      build_sites_config_file:
        type: str
        default: build_sites.yml
        required: false
        desc: |
          File that defines the builds (dbkeys) available at sites used by display applications
          and the URL to those sites.

          The value of this option will be resolved with respect to <config_dir>.

      builds_file_path:
        type: str
        default: shared/ucsc/builds.txt
        required: false
        desc: |
          File containing old-style genome builds.

          The value of this option will be resolved with respect to <tool_data_path>.

      len_file_path:
        type: str
        default: shared/ucsc/chrom
        required: false
        desc: |
          Directory where chrom len files are kept, currently mainly used by trackster.

          The value of this option will be resolved with respect to <tool_data_path>.

      datatypes_config_file:
        type: str
        default: config/datatypes_conf.xml
        required: false
        desc: |
          Datatypes config file(s), defines what data (file) types are available in
          Galaxy (.sample is used if default does not exist).  If a datatype appears in
          multiple files, the last definition is used (though the first sniffer is used
          so limit sniffer definitions to one file).

      sniff_compressed_dynamic_datatypes_default:
        type: bool
        default: true
        required: false
        desc: |
          Enable sniffing of compressed datatypes. This can be configured/overridden
          on a per-datatype basis in the datatypes_conf.xml file.
          With this option set to false the compressed datatypes will be unpacked
          before sniffing.

      datatypes_disable_auto:
        type: bool
        default: false
        required: false
        desc: |
          Disable the 'Auto-detect' option for file uploads

      visualization_plugins_directory:
        type: str
        default: config/plugins/visualizations
        required: false
        desc: |
          Visualizations config directory: where to look for individual visualization
          plugins.  The path is relative to the Galaxy root dir.  To use an absolute
          path begin the path with '/'.  This is a comma-separated list.

      interactive_environment_plugins_directory:
        type: str
        required: false
        desc: |
          Interactive environment plugins root directory: where to look for interactive
          environment plugins.  By default none will be loaded.  Set to
          config/plugins/interactive_environments to load Galaxy's stock plugins.
          These will require Docker to be configured and have security considerations,
          so proceed with caution. The path is relative to the Galaxy root dir.  To use
          an absolute path begin the path with '/'.  This is a comma-separated list.

      tour_config_dir:
        type: str
        default: config/plugins/tours
        required: false
        desc: |
          Interactive tour directory: where to store interactive tour definition files.
          Galaxy ships with several basic interface tours enabled, though a different
          directory with custom tours can be specified here. The path is relative to the
          Galaxy root dir.  To use an absolute path begin the path with '/'.  This is a
          comma-separated list.

      webhooks_dir:
        type: str
        default: config/plugins/webhooks
        required: false
        desc: |
          Webhooks directory: where to store webhooks - plugins to extend the Galaxy UI.
          By default none will be loaded.  Set to config/plugins/webhooks/demo to load Galaxy's
          demo webhooks.  To use an absolute path begin the path with '/'.  This is a
          comma-separated list. Add test/functional/webhooks to this list to include the demo
          webhooks used to test the webhook framework.

      job_working_directory:
        type: str
        default: jobs_directory
        required: false
        desc: |
          Each job is given a unique empty directory as its current working directory.
          This option defines in what parent directory those directories will be
          created.

          The value of this option will be resolved with respect to <data_dir>.

      cluster_files_directory:
        type: str
        default: pbs
        path_resolves_to: data_dir
        required: false
        desc: |
          If using a cluster, Galaxy will write job scripts and stdout/stderr to this
          directory.

      template_cache_path:
        type: str
        default: compiled_templates
        path_resolves_to: data_dir
        required: false
        desc: |
          Mako templates are compiled as needed and cached for reuse, this directory is
          used for the cache

      check_job_script_integrity:
        type: bool
        default: true
        required: false
        desc: |
          Set to false to disable various checks Galaxy will do to ensure it
          can run job scripts before attempting to execute or submit them.

      check_job_script_integrity_count:
        type: int
        default: 35
        required: false
        desc: |
          Number of checks to execute if check_job_script_integrity is enabled.

      check_job_script_integrity_sleep:
        type: float
        default: .25
        required: false
        desc: |
          Time to sleep between checks if check_job_script_integrity is enabled (in seconds).

      default_job_shell:
        type: str
        default: /bin/bash
        required: false
        desc: |
          Set the default shell used by non-containerized jobs Galaxy-wide. This
          defaults to bash for all jobs and can be overridden at the destination
          level for heterogeneous clusters. conda job resolution requires bash or zsh
          so if this is switched to /bin/sh for instance - conda resolution
          should be disabled. Containerized jobs always use /bin/sh - so more maximum
          portability tool authors should assume generated commands run in sh.

      citation_cache_type:
        type: str
        default: file
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as https://doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.

      citation_cache_data_dir:
        type: str
        default: citations/data
        path_resolves_to: data_dir
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as https://doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.

      citation_cache_lock_dir:
        type: str
        default: citations/locks
        path_resolves_to: data_dir
        required: false
        desc: |
          Citation related caching.  Tool citations information maybe fetched from
          external sources such as https://doi.org/ by Galaxy - the following
          parameters can be used to control the caching used to store this information.

      mulled_resolution_cache_type:
        type: str
        default: file
        required: false
        desc: |
          Mulled resolution caching. Mulled resolution uses external APIs of quay.io, these
          requests are caching using this and the following parameters

      mulled_resolution_cache_data_dir:
        type: str
        default: mulled/data
        path_resolves_to: data_dir
        required: false
        desc: |
          Data directory used by beaker for caching mulled resolution requests.

      mulled_resolution_cache_lock_dir:
        type: str
        default: mulled/locks
        path_resolves_to: data_dir
        required: false
        desc: |
          Lock directory used by beaker for caching mulled resolution requests.

      object_store_config_file:
        type: str
        default: object_store_conf.xml
        required: false
        desc: |
          Configuration file for the object store
          If this is set and exists, it overrides any other objectstore settings.

          The value of this option will be resolved with respect to <config_dir>.

      object_store_store_by:
        type: str
        default: id
        required: false
        desc: |
          What Dataset attribute is used to reference files in an ObjectStore implementation,
          default is 'id' but can also be set to 'uuid' for more de-centralized usage.

      smtp_server:
        type: str
        required: false
        desc: |
          Galaxy sends mail for various things: subscribing users to the mailing list
          if they request it, password resets, reporting dataset errors, and sending
          activation emails. To do this, it needs to send mail through an SMTP server,
          which you may define here (host:port).
          Galaxy will automatically try STARTTLS but will continue upon failure.

      smtp_username:
        type: str
        required: false
        desc: |
          If your SMTP server requires a username and password, you can provide them
          here (password in cleartext here, but if your server supports STARTTLS it
          will be sent over the network encrypted).

      smtp_password:
        type: str
        required: false
        desc: |
          If your SMTP server requires a username and password, you can provide them
          here (password in cleartext here, but if your server supports STARTTLS it
          will be sent over the network encrypted).

      smtp_ssl:
        type: bool
        default: false
        required: false
        desc: |
          If your SMTP server requires SSL from the beginning of the connection

      mailing_join_addr:
        type: str
        required: false
        desc: |
          On the user registration form, users may choose to join a mailing list. This
          is the address used to subscribe to the list. Uncomment and leave empty if you
          want to remove this option from the user registration form.

          Example value 'galaxy-announce-join@bx.psu.edu'

      error_email_to:
        type: str
        required: false
        desc: |
          Datasets in an error state include a link to report the error.  Those reports
          will be sent to this address.  Error reports are disabled if no address is
          set.  Also this email is shown as a contact to user in case of Galaxy
          misconfiguration and other events user may encounter.

      email_from:
        type: str
        required: false
        desc: |
          Email address to use in the 'From' field when sending emails for
          account activations, workflow step notifications and password resets.
          We recommend using string in the following format:
          Galaxy Project <galaxy-no-reply@example.com>
          If not configured, '<galaxy-no-reply@HOSTNAME>' will be used.

      instance_resource_url:
        type: str
        required: false
        desc: |
          URL of the support resource for the galaxy instance.  Used in activation
          emails.

          Example value 'https://galaxyproject.org/'

      blacklist_file:
        type: str
        required: false
        desc: |
          E-mail domains blacklist is used for filtering out users that are using
          disposable email address during the registration.  If their address domain
          matches any domain in the blacklist, they are refused the registration.

          Example value 'config/disposable_email_blacklist.conf'

      registration_warning_message:
        type: str
        default: >-
          Please register only one account - we provide this service free of charge and have limited
          computational resources. Multi-accounts are tracked and will be subjected to account
          termination and data deletion.
        required: false
        desc: |
          Registration warning message is used to discourage people from registering
          multiple accounts.  Applies mostly for the main Galaxy instance.
          If no message specified the warning box will not be shown.

      user_activation_on:
        type: bool
        default: false
        required: false
        desc: |
          User account activation feature global flag.  If set to false, the rest of
          the Account activation configuration is ignored and user activation is
          disabled (i.e. accounts are active since registration).
          The activation is also not working in case the SMTP server is not defined.

      activation_grace_period:
        type: int
        default: 3
        required: false
        desc: |
          Activation grace period (in hours).  Activation is not forced (login is not
          disabled) until grace period has passed.  Users under grace period can't run
          jobs. Enter 0 to disable grace period.

      inactivity_box_content:
        type: str
        default: >-
          Your account has not been activated yet.  Feel free to browse around and see what's
          available, but you won't be able to upload data or run jobs until you have verified your
          email address.
        required: false
        desc: |
          Shown in warning box to users that were not activated yet.
          In use only if activation_grace_period is set.

      password_expiration_period:
        type: int
        default: 0
        required: false
        desc: |
          Password expiration period (in days). Users are required to change their
          password every x days. Users will be redirected to the change password
          screen when they log in after their password expires. Enter 0 to disable
          password expiration.

      session_duration:
        type: int
        default: 0
        required: false
        desc: |
          Galaxy Session Timeout
          This provides a timeout (in minutes) after which a user will have to log back in.
          A duration of 0 disables this feature.

      ga_code:
        type: str
        required: false
        desc: |
          You can enter tracking code here to track visitor's behavior
          through your Google Analytics account.  Example: UA-XXXXXXXX-Y

      display_servers:
        type: str
        default: hgw1.cse.ucsc.edu,hgw2.cse.ucsc.edu,hgw3.cse.ucsc.edu,hgw4.cse.ucsc.edu,hgw5.cse.ucsc.edu,hgw6.cse.ucsc.edu,hgw7.cse.ucsc.edu,hgw8.cse.ucsc.edu,lowepub.cse.ucsc.edu
        required: false
        desc: |
          Galaxy can display data at various external browsers.  These options specify
          which browsers should be available.  URLs and builds available at these
          browsers are defined in the specified files.

          If use_remote_user is set to true, display application servers will be denied access
          to Galaxy and so displaying datasets in these sites will fail.
          display_servers contains a list of hostnames which should be allowed to
          bypass security to display datasets.  Please be aware that there are security
          implications if this is allowed.  More details (including required changes to
          the proxy server config) are available in the Apache proxy documentation on
          the Galaxy Community Hub.

          The list of servers in this sample config are for the UCSC Main, Test and
          Archaea browsers, but the default if left commented is to not allow any
          display sites to bypass security (you must uncomment the line below to allow
          them).

      enable_old_display_applications:
        type: bool
        default: true
        required: false
        desc: |
          Set this to false to disable the old-style display applications that
          are hardcoded into datatype classes.
          This may be desirable due to using the new-style, XML-defined, display
          applications that have been defined for many of the datatypes that have the
          old-style.
          There is also a potential security concern with the old-style applications,
          where a malicious party could provide a link that appears to reference the
          Galaxy server, but contains a redirect to a third-party server, tricking a
          Galaxy user to access said site.

      interactivetools_enable:
        type: bool
        default: false
        required: false
        desc: |
          Enable InteractiveTools.

      interactivetools_proxy_host:
        type: str
        desc: |
          Proxy host - assumed to just be hosted on the same hostname and port as
          Galaxy by default.

      interactivetools_map:
        type: str
        default: interactivetools_map.sqlite
        path_resolves_to: data_dir
        desc: |
          Map for interactivetool proxy.

      visualizations_visible:
        type: bool
        default: true
        required: false
        desc: |
          Show visualization tab and list in masthead.

      message_box_visible:
        type: bool
        default: false
        required: false
        reloadable: true
        desc: |
          Show a message box under the masthead.

      message_box_content:
        type: str
        required: false
        reloadable: true
        desc: |
          Show a message box under the masthead.

      message_box_class:
        type: str
        default: info
        required: false
        reloadable: true
        desc: |
          Class of the message box under the masthead. Possible values are:
          'info' (the default), 'warning', 'error', 'done'.

      brand:
        type: str
        required: false
        desc: |
          Append "{brand}" text to the masthead.

      display_galaxy_brand:
        type: bool
        default: true
        required: false
        desc: |
          Display the "Galaxy" text in the masthead.

      pretty_datetime_format:
        type: str
        default: $locale (UTC)
        required: false
        desc: |
          Format string used when showing date and time information.
          The string may contain:
          - the directives used by Python time.strftime() function (see
            https://docs.python.org/library/time.html#time.strftime),
          - $locale (complete format string for the server locale),
          - $iso8601 (complete format string as specified by ISO 8601 international
            standard).

      user_preferences_extra_conf_path:
        type: str
        default: 'user_preferences_extra_conf.yml'
        required: false
        desc: |
          Location of the configuration file containing extra user preferences.

          The value of this option will be resolved with respect to <config_dir>.

      default_locale:
        type: str
        default: auto
        required: false
        desc: |
          Default localization for Galaxy UI.
          Allowed values are listed at the end of client/galaxy/scripts/nls/locale.js.
          With the default value (auto), the locale will be automatically adjusted to
          the user's navigator language.
          Users can override this settings in their user preferences if the localization
          settings are enabled in user_preferences_extra_conf.yml

      galaxy_infrastructure_url:
        type: str
        default: http://localhost:8080
        required: false
        desc: |
          URL (with schema http/https) of the Galaxy instance as accessible
          within your local network - if specified used as a default by pulsar
          file staging and Jupyter Docker container for communicating back with
          Galaxy via the API.

          If you are attempting to set up GIEs on Mac OS X with Docker Desktop
          for Mac and your Galaxy instance runs on port 8080 this should be
          'http://host.docker.internal:8080'.  For more details see
          https://docs.docker.com/docker-for-mac/networking/

      galaxy_infrastructure_web_port:
        type: int
        default: 8080
        required: false
        desc: |
          If the above URL cannot be determined ahead of time in dynamic environments
          but the port which should be used to access Galaxy can be - this should be
          set to prevent Galaxy from having to guess.  For example if Galaxy is sitting
          behind a proxy with REMOTE_USER enabled - infrastructure shouldn't talk to
          Python processes directly and this should be set to 80 or 443, etc... If
          unset this file will be read for a server block defining a port corresponding
          to the webapp.

      welcome_url:
        type: str
        default: /static/welcome.html
        required: false
        reloadable: true
        desc: |
          The URL of the page to display in Galaxy's middle pane when loaded.  This can
          be an absolute or relative URL.

      logo_url:
        type: str
        default: /
        required: false
        desc: |
          The URL linked by the "Galaxy/brand" text.

      helpsite_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Galaxy Help" link in the "Help" menu.

      wiki_url:
        type: str
        default: https://galaxyproject.org/
        required: false
        desc: |
          The URL linked by the "Wiki" link in the "Help" menu.

      support_url:
        type: str
        default: https://galaxyproject.org/support/
        required: false
        desc: |
          The URL linked by the "Support" link in the "Help" menu.

      citation_url:
        type: str
        default: https://galaxyproject.org/citing-galaxy
        required: false
        desc: |
          The URL linked by the "How to Cite Galaxy" link in the "Help" menu.

      search_url:
        type: str
        default: https://galaxyproject.org/search/
        required: false
        desc: |
          The URL linked by the "Search" link in the "Help" menu.

      mailing_lists_url:
        type: str
        default: https://galaxyproject.org/mailing-lists/
        required: false
        desc: |
          The URL linked by the "Mailing Lists" link in the "Help" menu.

      screencasts_url:
        type: str
        default: https://vimeo.com/galaxyproject
        required: false
        desc: |
          The URL linked by the "Videos" link in the "Help" menu.

      terms_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Terms and Conditions" link in the "Help" menu, as well
          as on the user registration and login forms and in the activation emails.

      qa_url:
        type: str
        required: false
        desc: |
          The URL linked by the "Galaxy Q&A" link in the "Help" menu
          The Galaxy Q&A site is under development; when the site is done, this URL
          will be set and uncommented.

      static_enabled:
        type: bool
        default: true
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_cache_time:
        type: int
        default: 360
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_dir:
        type: str
        default: static/
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_images_dir:
        type: str
        default: static/images
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_favicon_dir:
        type: str
        default: static/favicon.ico
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_scripts_dir:
        type: str
        default: static/scripts/
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_style_dir:
        type: str
        default: static/june_2007_style/blue
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      static_robots_txt:
        type: str
        default: static/robots.txt
        required: false
        desc: |
          Serve static content, which must be enabled if you're not serving it via a
          proxy server.  These options should be self explanatory and so are not
          documented individually.  You can use these paths (or ones in the proxy
          server) to point to your own styles.

      display_chunk_size:
        type: int
        default: 65536
        required: false
        desc: |
          Incremental Display Options

      apache_xsendfile:
        type: bool
        default: false
        required: false
        desc: |
          For help on configuring the Advanced proxy features, see:
          https://docs.galaxyproject.org/en/master/admin/production.html

          Apache can handle file downloads (Galaxy-to-user) via mod_xsendfile.  Set
          this to true to inform Galaxy that mod_xsendfile is enabled upstream.

      nginx_x_accel_redirect_base:
        type: str
        required: false
        desc: |
          The same download handling can be done by nginx using X-Accel-Redirect.  This
          should be set to the path defined in the nginx config as an internal redirect
          with access to Galaxy's data files (see documentation linked above).

      upstream_gzip:
        type: bool
        default: false
        required: false
        desc: |
          If using compression in the upstream proxy server, use this option to disable
          gzipping of library .tar.gz and .zip archives, since the proxy server will do
          it faster on the fly.

      x_frame_options:
        type: str
        default: SAMEORIGIN
        required: false
        desc: |
          The following default adds a header to web request responses that
          will cause modern web browsers to not allow Galaxy to be embedded in
          the frames of web applications hosted at other hosts - this can help
          prevent a class of attack called clickjacking
          (https://www.owasp.org/index.php/Clickjacking).  If you configure a
          proxy in front of Galaxy - please ensure this header remains intact
          to protect your users.  Uncomment and leave empty to not set the
          `X-Frame-Options` header.

      nginx_upload_store:
        type: str
        required: false
        desc: |
          nginx can also handle file uploads (user-to-Galaxy) via nginx_upload_module.
          Configuration for this is complex and explained in detail in the
          documentation linked above.  The upload store is a temporary directory in
          which files uploaded by the upload module will be placed.

      nginx_upload_path:
        type: str
        required: false
        desc: |
          This value overrides the action set on the file upload form, e.g. the web
          path where the nginx_upload_module has been configured to intercept upload
          requests.

      nginx_upload_job_files_store:
        type: str
        required: false
        desc: |
          Galaxy can also use nginx_upload_module to receive files staged out upon job
          completion by remote job runners (i.e. Pulsar) that initiate staging
          operations on the remote end.  See the Galaxy nginx documentation for the
          corresponding nginx configuration.

      nginx_upload_job_files_path:
        type: str
        required: false
        desc: |
          Galaxy can also use nginx_upload_module to receive files staged out upon job
          completion by remote job runners (i.e. Pulsar) that initiate staging
          operations on the remote end.  See the Galaxy nginx documentation for the
          corresponding nginx configuration.

      chunk_upload_size:
        type: int
        default: 104857600
        required: false
        desc: |
          Galaxy can upload user files in chunks without using nginx. Enable the chunk
          uploader by specifying a chunk size larger than 0. The chunk size is specified
          in bytes (default: 100MB).

      dynamic_proxy_manage:
        type: bool
        default: true
        required: false
        desc: |
          Have Galaxy manage dynamic proxy component for routing requests to other
          services based on Galaxy's session cookie.  It will attempt to do this by
          default though you do need to install node+npm and do an npm install from
          `lib/galaxy/web/proxy/js`.  It is generally more robust to configure this
          externally, managing it in the same way Galaxy itself is managed.  If true, Galaxy will only
          launch the proxy if it is actually going to be used (e.g. for Jupyter).

      dynamic_proxy:
        type: str
        default: node
        required: false
        desc: |
          As of 16.04 Galaxy supports multiple proxy types. The original NodeJS
          implementation, alongside a new Golang single-binary-no-dependencies
          version. Valid values are (node, golang)

      dynamic_proxy_session_map:
        type: str
        default: session_map.sqlite
        path_resolves_to: data_dir
        required: false
        desc: |
          The NodeJS dynamic proxy can use an SQLite database or a JSON file for IPC,
          set that here.

      dynamic_proxy_bind_port:
        type: int
        default: 8800
        required: false
        desc: |
          Set the port and IP for the dynamic proxy to bind to, this must match
          the external configuration if dynamic_proxy_manage is set to false.

      dynamic_proxy_bind_ip:
        type: str
        default: 0.0.0.0
        required: false
        desc: |
          Set the port and IP for the dynamic proxy to bind to, this must match
          the external configuration if dynamic_proxy_manage is set to false.

      dynamic_proxy_debug:
        type: bool
        default: false
        required: false
        desc: |
          Enable verbose debugging of Galaxy-managed dynamic proxy.

      dynamic_proxy_external_proxy:
        type: bool
        default: false
        required: false
        desc: |
          The dynamic proxy is proxied by an external proxy (e.g. apache frontend to
          nodejs to wrap connections in SSL).

      dynamic_proxy_prefix:
        type: str
        default: gie_proxy
        required: false
        desc: |
          Additionally, when the dynamic proxy is proxied by an upstream server, you'll
          want to specify a prefixed URL so both Galaxy and the proxy reside under the
          same path that your cookies are under. This will result in a url like
          https://FQDN/galaxy-prefix/gie_proxy for proxying

      dynamic_proxy_golang_noaccess:
        type: int
        default: 60
        required: false
        desc: |
          This attribute governs the minimum length of time between consecutive HTTP/WS
          requests through the proxy, before the proxy considers a container as being
          inactive and kills it.

      dynamic_proxy_golang_clean_interval:
        type: int
        default: 10
        required: false
        desc: |
          In order to kill containers, the golang proxy has to check at some interval
          for possibly dead containers. This is exposed as a configurable parameter,
          but the default value is probably fine.

      dynamic_proxy_golang_docker_address:
        type: str
        default: unix:///var/run/docker.sock
        required: false
        desc: |
          The golang proxy needs to know how to talk to your docker daemon. Currently
          TLS is not supported, that will come in an update.

      dynamic_proxy_golang_api_key:
        type: str
        required: false
        desc: |
          The golang proxy uses a RESTful HTTP API for communication with Galaxy
          instead of a JSON or SQLite file for IPC. If you do not specify this, it will
          be set randomly for you. You should set this if you are managing the proxy
          manually.

      auto_configure_logging:
        type: bool
        default: true
        required: false
        desc: |
          If true, Galaxy will attempt to configure a simple root logger if a
          "loggers" section does not appear in this configuration file.

      log_level:
        type: str
        default: DEBUG
        required: false
        desc: |
          Verbosity of console log messages.  Acceptable values can be found here:
          https://docs.python.org/library/logging.html#logging-levels
          A custom debug level of "TRACE" is available for even more verbosity.

      logging:
        type: map
        allowempty: true
        desc: |
          Controls where and how the server logs messages. If unset, the default is to log all messages to standard
          output at the level defined by the `log_level` configuration option. Configuration is described in the
          documentation at:
          https://docs.galaxyproject.org/en/master/admin/config_logging.html

      database_engine_option_echo:
        type: bool
        default: false
        required: false
        desc: |
          Print database operations to the server log (warning, quite verbose!).

      database_engine_option_echo_pool:
        type: bool
        default: false
        required: false
        desc: |
          Print database pool operations to the server log (warning, quite verbose!).

      log_events:
        type: bool
        default: false
        required: false
        desc: |
          Turn on logging of application events and some user events to the database.

      log_actions:
        type: bool
        default: false
        required: false
        desc: |
          Turn on logging of user actions to the database.  Actions currently logged
          are grid views, tool searches, and use of "recently" used tools menu.  The
          log_events and log_actions functionality will eventually be merged.

      fluent_log:
        type: bool
        default: false
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.

      fluent_host:
        type: str
        default: localhost
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.

      fluent_port:
        type: int
        default: 24224
        required: false
        desc: |
          Fluentd configuration.  Various events can be logged to the fluentd instance
          configured below by enabling fluent_log.

      sanitize_all_html:
        type: bool
        default: true
        required: false
        desc: |
          Sanitize all HTML tool output.  By default, all tool output served as
          'text/html' will be sanitized thoroughly.  This can be disabled if you have
          special tools that require unaltered output.  WARNING: disabling this does
          make the Galaxy instance susceptible to XSS attacks initiated by your users.

      sanitize_whitelist_file:
        type: str
        default: config/sanitize_whitelist.txt
        required: false
        desc: |
          Whitelist sanitization file.
          Datasets created by tools listed in this file are trusted and will not have
          their HTML sanitized on display.  This can be manually edited or manipulated
          through the Admin control panel -- see "Manage Display Whitelist"

      serve_xss_vulnerable_mimetypes:
        type: bool
        default: false
        required: false
        desc: |
          By default Galaxy will serve non-HTML tool output that may potentially
          contain browser executable JavaScript content as plain text.  This will for
          instance cause SVG datasets to not render properly and so may be disabled
          by setting this option to true.

      allowed_origin_hostnames:
        type: str
        required: false
        desc: |
          Return a Access-Control-Allow-Origin response header that matches the Origin
          header of the request if that Origin hostname matches one of the strings or
          regular expressions listed here. This is a comma-separated list of hostname
          strings or regular expressions beginning and ending with /.
          E.g. mysite.com,google.com,usegalaxy.org,/^[\w\.]*example\.com/
          See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

      trust_jupyter_notebook_conversion:
        type: bool
        default: false
        required: false
        desc: |
          Set to true to use Jupyter nbconvert to build HTML from Jupyter
          notebooks in Galaxy histories.  This process may allow users to execute
          arbitrary code or serve arbitrary HTML.  If enabled, Jupyter must be
          available and on Galaxy's PATH, to do this run
          `pip install jinja2 pygments jupyter` in Galaxy's virtualenv.

      debug:
        type: bool
        default: false
        required: false
        desc: |
          Debug enables access to various config options useful for development
          and debugging: use_lint, use_profile, and use_printdebug.  It also
          causes the files used by PBS/SGE (submission script, output, and error)
          to remain on disk after the job is complete.

      use_lint:
        type: bool
        default: false
        required: false
        desc: |
          Check for WSGI compliance.

      use_profile:
        type: bool
        default: false
        required: false
        desc: |
          Run the Python profiler on each request.

      use_printdebug:
        type: bool
        default: true
        required: false
        desc: |
          Intercept print statements and show them on the returned page.

      monitor_thread_join_timeout:
        type: int
        default: 30
        required: false
        desc: |
          When stopping Galaxy cleanly, how much time to give various monitoring/polling
          threads to finish before giving up on joining them. Set to 0 to disable this and
          terminate without waiting. Among others, these threads include the job handler
          workers, which are responsible for preparing/submitting and collecting/finishing
          jobs, and which can cause job errors if not shut down cleanly. If using
          supervisord, consider also increasing the value of `stopwaitsecs`. If using job
          handler mules, consider also setting the `mule-reload-mercy` uWSGI option. See
          the Galaxy Admin Documentation for more.

      use_heartbeat:
        type: bool
        default: false
        required: false
        desc: |
          Write thread status periodically to 'heartbeat.log',  (careful, uses disk
          space rapidly!).  Useful to determine why your processes may be consuming a
          lot of CPU.

      heartbeat_interval:
        type: int
        default: 20
        required: false
        desc: |
          Control the period (in seconds) between dumps. Use -1 to disable. Regardless
          of this setting, if use_heartbeat is enabled, you can send a Galaxy process
          (unless running with uWSGI) SIGUSR1 (`kill -USR1`) to force a dump.

      heartbeat_log:
        type: str
        required: false
        desc: |
          Heartbeat log filename. Can accept the template variables {server_name} and
          {pid}

          Sample default 'heartbeat_{server_name}.log'

      sentry_dsn:
        type: str
        required: false
        desc: |
          Log to Sentry
          Sentry is an open source logging and error aggregation platform.  Setting
          sentry_dsn will enable the Sentry middleware and errors will be sent to the
          indicated sentry instance.  This connection string is available in your
          sentry instance under <project_name> -> Settings -> API Keys.

      sentry_sloreq_threshold:
        type: float
        default: 0.0
        required: false
        desc: |
          Sentry slow request logging.  Requests slower than the threshold
          indicated below will be sent as events to the configured Sentry
          server (above, sentry_dsn).  A value of '0' is disabled.  For
          example, you would set this to .005 to log all queries taking longer
          than 5 milliseconds.

      statsd_host:
        type: str
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.

      statsd_port:
        type: int
        default: 8125
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.

      statsd_prefix:
        type: str
        default: galaxy
        required: false
        desc: |
          Log to statsd
          Statsd is an external statistics aggregator (https://github.com/etsy/statsd)
          Enabling the following options will cause galaxy to log request timing and
          other statistics to the configured statsd instance.  The statsd_prefix is
          useful if you are running multiple Galaxy instances and want to segment
          statistics between them within the same aggregator.

      statsd_influxdb:
        type: bool
        default: false
        required: false
        desc: |
          If you are using telegraf to collect these metrics and then sending
          them to InfluxDB, Galaxy can provide more nicely tagged metrics.
          Instead of sending prefix + dot-separated-path, Galaxy will send
          prefix with a tag path set to the page url

      library_import_dir:
        type: str
        required: false
        desc: |
          Add an option to the library upload form which allows administrators to
          upload a directory of files.

      user_library_import_dir:
        type: str
        required: false
        desc: |
          Add an option to the library upload form which allows authorized
          non-administrators to upload a directory of files.  The configured directory
          must contain sub-directories named the same as the non-admin user's Galaxy
          login ( email ).  The non-admin user is restricted to uploading files or
          sub-directories of files contained in their directory.

      user_library_import_dir_auto_creation:
        type: bool
        default: false
        required: false
        desc: |
          If user_library_import_dir is set, this option will auto create a library
          import directory for every user (based on their email) upon login.

      user_library_import_symlink_whitelist:
        type: str
        required: false
        desc: |
          For security reasons, users may not import any files that actually lie
          outside of their `user_library_import_dir` (e.g. using symbolic links). A
          list of directories can be allowed by setting the following option (the list
          is comma-separated). Be aware that *any* user with library import permissions
          can import from anywhere in these directories (assuming they are able to
          create symlinks to them).

      user_library_import_check_permissions:
        type: bool
        default: false
        required: false
        desc: |
          In conjunction or alternatively, Galaxy can restrict user library imports to
          those files that the user can read (by checking basic unix permissions).
          For this to work, the username has to match the username on the filesystem.

      allow_path_paste:
        type: bool
        default: false
        required: false
        desc: |
          Allow admins to paste filesystem paths during upload. For libraries this
          adds an option to the admin library upload tool allowing admins to paste
          filesystem paths to files and directories in a box, and these paths will be
          added to a library.  For history uploads, this allows pasting in paths as URIs.
          (i.e. prefixed with file://). Set to true to enable.  Please note the security
          implication that this will give Galaxy Admins access to anything your Galaxy
          user has access to.

      disable_library_comptypes:
        type: str
        required: false
        desc: |
          Users may choose to download multiple files from a library in an archive.  By
          default, Galaxy allows users to select from a few different archive formats
          if testing shows that Galaxy is able to create files using these formats.
          Specific formats can be disabled with this option, separate more than one
          format with commas.  Available formats are currently 'zip', 'gz', and 'bz2'.

      transfer_manager_port:
        type: int
        default: 8163
        required: false
        desc: |
          Some sequencer integration features in beta allow you to automatically
          transfer datasets.  This is done using a lightweight transfer manager which
          runs outside of Galaxy (but is spawned by it automatically).  Galaxy will
          communicate with this manager over the port specified here.

      tool_name_boost:
        type: float
        default: 9.0
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_section_boost:
        type: float
        default: 3.0
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_description_boost:
        type: float
        default: 2.0
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_label_boost:
        type: float
        default: 1.0
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_stub_boost:
        type: float
        default: 5.0
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_help_boost:
        type: float
        default: 0.5
        required: false
        reloadable: true
        desc: |
          Boosts are used to customize this instance's toolbox search.
          The higher the boost, the more importance the scoring algorithm gives to the
          given field.  Section refers to the tool group in the tool panel.  Rest of
          the fields are tool's attributes.

      tool_search_limit:
        type: int
        default: 20
        required: false
        reloadable: true
        desc: |
          Limits the number of results in toolbox search.  Can be used to tweak how many
          results will appear.

      tool_enable_ngram_search:
        type: bool
        default: false
        required: false
        reloadable: true
        desc: |
          Enable/ disable Ngram-search for tools. It makes tool
          search results tolerant for spelling mistakes in the query
          by dividing the query into multiple ngrams and search for
          each ngram

      tool_ngram_minsize:
        type: int
        default: 3
        required: false
        reloadable: true
        desc: |
          Set minimum size of ngrams

      tool_ngram_maxsize:
        type: int
        default: 4
        required: false
        reloadable: true
        desc: |
          Set maximum size of ngrams

      tool_test_data_directories:
        type: str
        default: 'test-data'
        required: false
        desc: |
          Set tool test data directory. The test framework sets this value to
          'test-data,https://github.com/galaxyproject/galaxy-test-data.git' which will
          cause Galaxy to clone down extra test data on the fly for certain tools
          distributed with Galaxy but this is likely not appropriate for production systems.
          Instead one can simply clone that repository directly and specify a path here
          instead of a Git HTTP repository.

      id_secret:
        type: str
        default: USING THE DEFAULT IS NOT SECURE!
        required: false
        desc: |
          Galaxy encodes various internal values when these values will be output in
          some format (for example, in a URL or cookie).  You should set a key to be
          used by the algorithm that encodes and decodes these values. It can be any
          string with a length between 5 and 56 bytes.
          One simple way to generate a value for this is with the shell command:
            python -c 'from __future__ import print_function; import time; print(time.time())' | md5sum | cut -f 1 -d ' '

      use_remote_user:
        type: bool
        default: false
        required: false
        desc: |
          User authentication can be delegated to an upstream proxy server (usually
          Apache).  The upstream proxy should set a REMOTE_USER header in the request.
          Enabling remote user disables regular logins.  For more information, see:
          https://docs.galaxyproject.org/en/master/admin/special_topics/apache.html

      remote_user_maildomain:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled and your external authentication
          method just returns bare usernames, set a default mail domain to be appended
          to usernames, to become your Galaxy usernames (email addresses).

      remote_user_header:
        type: str
        default: HTTP_REMOTE_USER
        required: false
        desc: |
          If use_remote_user is enabled, the header that the upstream proxy provides
          the remote username in defaults to HTTP_REMOTE_USER (the 'HTTP_' is prepended
          by WSGI).  This option allows you to change the header.  Note, you still need
          to prepend 'HTTP_' to the header in this option, but your proxy server should
          *not* include 'HTTP_' at the beginning of the header name.

      remote_user_secret:
        type: str
        default: USING THE DEFAULT IS NOT SECURE!
        required: false
        desc: |
          If use_remote_user is enabled, anyone who can log in to the Galaxy host may
          impersonate any other user by simply sending the appropriate header.  Thus a
          secret shared between the upstream proxy server, and Galaxy is required.
          If anyone other than the Galaxy user is using the server, then apache/nginx
          should pass a value in the header 'GX_SECRET' that is identical to the one
          below.

      remote_user_logout_href:
        type: str
        required: false
        desc: |
          If use_remote_user is enabled, you can set this to a URL that will log your
          users out.

      normalize_remote_user_email:
        type: bool
        default: false
        required: false
        desc: |
          If your proxy and/or authentication source does not normalize e-mail
          addresses or user names being passed to Galaxy - set this option
          to true to force these to lower case.

      single_user:
        type: str
        required: false
        desc: |
          If an e-mail address is specified here, it will hijack remote user mechanics
          (``use_remote_user``) and have the webapp inject a single fixed user. This
          has the effect of turning Galaxy into a single user application with no
          login or external proxy required. Such applications should not be exposed to
          the world.

      admin_users:
        type: str
        required: false
        reloadable: true
        desc: |
          Administrative users - set this to a comma-separated list of valid Galaxy
          users (email addresses).  These users will have access to the Admin section
          of the server, and will have access to create users, groups, roles,
          libraries, and more.  For more information, see:
            https://galaxyproject.org/admin/

      require_login:
        type: bool
        default: false
        required: false
        desc: |
          Force everyone to log in (disable anonymous access).

      show_welcome_with_login:
        type: bool
        default: false
        required: false
        desc: |
          Show the site's welcome page (see welcome_url) alongside the login page
          (even if require_login is true).

      allow_user_creation:
        type: bool
        default: true
        required: false
        desc: |
          Allow unregistered users to create new accounts (otherwise, they will have to
          be created by an admin).

      allow_user_deletion:
        type: bool
        default: false
        required: false
        desc: |
          Allow administrators to delete accounts.

      allow_user_impersonation:
        type: bool
        default: false
        required: false
        desc: |
          Allow administrators to log in as other users (useful for debugging).

      show_user_prepopulate_form:
        type: bool
        default: false
        required: false
        desc: |
          When using LDAP for authentication, allow administrators to pre-populate users
          using an additional form on 'Create new user'

      allow_user_dataset_purge:
        type: bool
        default: true
        required: false
        desc: |
          Allow users to remove their datasets from disk immediately (otherwise,
          datasets will be removed after a time period specified by an administrator in
          the cleanup scripts run via cron)

      new_user_dataset_access_role_default_private:
        type: bool
        default: false
        required: false
        desc: |
          By default, users' data will be public, but setting this to true will cause
          it to be private.  Does not affect existing users and data, only ones created
          after this option is set.  Users may still change their default back to
          public.

      expose_user_name:
        type: bool
        default: false
        required: false
        desc: |
          Expose user list.  Setting this to true will expose the user list to
          authenticated users.  This makes sharing datasets in smaller galaxy instances
          much easier as they can type a name/email and have the correct user show up.
          This makes less sense on large public Galaxy instances where that data
          shouldn't be exposed.  For semi-public Galaxies, it may make sense to expose
          just the username and not email, or vice versa.

          If enable_beta_gdpr is set to true, then this option will be
          overridden and set to false.

      expose_user_email:
        type: bool
        default: false
        required: false
        desc: |
          Expose user list.  Setting this to true will expose the user list to
          authenticated users.  This makes sharing datasets in smaller galaxy instances
          much easier as they can type a name/email and have the correct user show up.
          This makes less sense on large public Galaxy instances where that data
          shouldn't be exposed.  For semi-public Galaxies, it may make sense to expose
          just the username and not email, or vice versa.

          If enable_beta_gdpr is set to true, then this option will be
          overridden and set to false.

      fetch_url_whitelist:
        type: str
        required: false
        desc: |
          Whitelist for local network addresses for "Upload from URL" dialog.
          By default, Galaxy will deny access to the local network address space, to
          prevent users making requests to services which the administrator did not
          intend to expose. Previously, you could request any network service that
          Galaxy might have had access to, even if the user could not normally access it.
          It should be a comma-separated list of IP addresses or IP address/mask, e.g.
          10.10.10.10,10.0.1.0/24,fd00::/8

      enable_beta_gdpr:
        type: bool
        default: false
        required: false
        desc: |
          Enables GDPR Compliance mode. This makes several changes to the way
          Galaxy logs and exposes data externally such as removing emails and
          usernames from logs and bug reports. It also causes the delete user
          admin action to permanently redact their username and password, but
          not to delete data associated with the account as this is not
          currently easily implementable.

          You are responsible for removing personal data from backups.

          This forces expose_user_email and expose_user_name to be false, and
          forces user_deletion to be true to support the right to erasure.

          Please read the GDPR section under the special topics area of the
          admin documentation.

      enable_beta_containers_interface:
        type: bool
        default: false
        required: false
        desc: |
          Enable the new container interface for Interactive Environments

      enable_beta_workflow_modules:
        type: bool
        default: false
        required: false
        desc: |
          Enable beta workflow modules that should not yet be considered part of Galaxy's
          stable API. (The module state definitions may change and workflows built using
          these modules may not function in the future.)

      default_workflow_export_format:
        type: str
        default: ga
        required: false
        desc: |
          Default format for the export of workflows. Possible values are 'ga'
          or 'format2'.

      force_beta_workflow_scheduled_min_steps:
        type: int
        default: 250
        required: false
        desc: |
          Following options only apply to workflows scheduled using the legacy workflow
          run API (running workflows via a POST to /api/workflows).
          Force usage of Galaxy's beta workflow scheduler under certain circumstances -
          this workflow scheduling forces Galaxy to schedule workflows in the background
          so initial submission of the workflows is significantly sped up. This does
          however force the user to refresh their history manually to see newly scheduled
          steps (for "normal" workflows - steps are still scheduled far in advance of
          them being queued and scheduling here doesn't refer to actual cluster job
          scheduling).
          Workflows containing more than the specified number of steps will always use
          the Galaxy's beta workflow scheduling.

      force_beta_workflow_scheduled_for_collections:
        type: bool
        default: false
        required: false
        desc: |
          Following options only apply to workflows scheduled using the legacy workflow
          run API (running workflows via a POST to /api/workflows).
          Force usage of Galaxy's beta workflow scheduler under certain circumstances -
          this workflow scheduling forces Galaxy to schedule workflows in the background
          so initial submission of the workflows is significantly sped up. This does
          however force the user to refresh their history manually to see newly scheduled
          steps (for "normal" workflows - steps are still scheduled far in advance of
          them being queued and scheduling here doesn't refer to actual cluster job
          scheduling).
          Workflows containing more than the specified number of steps will always use
          the Galaxy's beta workflow scheduling.
          Switch to using Galaxy's beta workflow scheduling for all workflows involving
          collections.

      parallelize_workflow_scheduling_within_histories:
        type: bool
        default: false
        required: false
        desc: |
          If multiple job handlers are enabled, allow Galaxy to schedule workflow invocations
          in multiple handlers simultaneously. This is discouraged because it results in a
          less predictable order of workflow datasets within in histories.

      maximum_workflow_invocation_duration:
        type: int
        default: 2678400
        required: false
        desc: |
          This is the maximum amount of time a workflow invocation may stay in an active
          scheduling state in seconds. Set to -1 to disable this maximum and allow any workflow
          invocation to schedule indefinitely. The default corresponds to 1 month.

      maximum_workflow_jobs_per_scheduling_iteration:
        type: int
        default: -1
        required: false
        desc: |
          Specify a maximum number of jobs that any given workflow scheduling iteration can create.
          Set this to a positive integer to prevent large collection jobs in a workflow from
          preventing other jobs from executing. This may also mitigate memory issues associated with
          scheduling workflows at the expense of increased total DB traffic because model objects
          are expunged from the SQL alchemy session between workflow invocation scheduling iterations.
          Set to -1 to disable any such maximum (the default).

      history_local_serial_workflow_scheduling:
        type: bool
        default: false
        required: false
        desc: |
          Force serial scheduling of workflows within the context of a particular history

      enable_oidc:
        type: bool
        default: false
        required: false
        desc: |
          Enables and disables OpenID Connect (OIDC) support.

      oidc_config_file:
        type: str
        default: oidc_config.xml
        required: false
        desc: |
          Sets the path to OIDC configuration file.

          The value of this option will be resolved with respect to <config_dir>.

      oidc_backends_config_file:
        type: str
        default: oidc_backends_config.xml
        required: false
        desc: |
          Sets the path to OIDC backends configuration file.

          The value of this option will be resolved with respect to <config_dir>.

      auth_config_file:
        type: str
        default: auth_conf.xml
        required: false
        desc: |
          XML config file that allows the use of different authentication providers
          (e.g. LDAP) instead or in addition to local authentication (.sample is used
          if default does not exist).

          The value of this option will be resolved with respect to <config_dir>.

      api_allow_run_as:
        type: str
        required: false
        desc: |
          Optional list of email addresses of API users who can make calls on behalf of
          other users.

      master_api_key:
        type: str
        required: false
        desc: |
          Master key that allows many API admin actions to be used without actually
          having a defined admin user in the database/config.  Only set this if you
          need to bootstrap Galaxy, you probably do not want to set this on public
          servers.

      enable_openid:
        type: bool
        default: false
        required: false
        desc: |
          Enable access to post-authentication options via OpenID.

      openid_consumer_cache_path:
        type: str
        default: openid_consumer_cache
        path_resolves_to: data_dir
        required: false
        desc: |
          If OpenID is enabled, consumer cache directory to use.

      enable_tool_tags:
        type: bool
        default: false
        required: false
        desc: |
          Enable tool tags (associating tools with tags).  This has its own option
          since its implementation has a few performance implications on startup for
          large servers.

      enable_unique_workflow_defaults:
        type: bool
        default: false
        required: false
        desc: |
          Enable a feature when running workflows.  When enabled, default datasets
          are selected for "Set at Runtime" inputs from the history such that the
          same input will not be selected twice, unless there are more inputs than
          compatible datasets in the history.
          When false, the most recently added compatible item in the history will
          be used for each "Set at Runtime" input, independent of others in the workflow.

      myexperiment_target_url:
        type: str
        default: www.myexperiment.org:80
        required: false
        desc: |
          The URL to the myExperiment instance being used (omit scheme but include port).

      ftp_upload_dir:
        type: str
        required: false
        desc: |
          Enable Galaxy's "Upload via FTP" interface.  You'll need to install and
          configure an FTP server (we've used ProFTPd since it can use Galaxy's
          database for authentication) and set the following two options.
          This should point to a directory containing subdirectories matching users'
          identifier (defaults to e-mail), where Galaxy will look for files.

      ftp_upload_site:
        type: str
        required: false
        desc: |
          This should be the hostname of your FTP server, which will be provided to
          users in the help text.

      ftp_upload_dir_identifier:
        type: str
        default: email
        required: false
        desc: |
          User attribute to use as subdirectory in calculating default ftp_upload_dir
          pattern. By default this will be email so a user's FTP upload directory will be
          ${ftp_upload_dir}/${user.email}. Can set this to other attributes such as id or
          username though.

      ftp_upload_dir_template:
        type: str
        required: false
        desc: |
          Python string template used to determine an FTP upload directory for a
          particular user.

          Defaults to '${ftp_upload_dir}/${ftp_upload_dir_identifier}'.

      ftp_upload_purge:
        type: bool
        default: true
        required: false
        desc: |
          Set to false to prevent Galaxy from deleting uploaded FTP files
          as it imports them.

      enable_quotas:
        type: bool
        default: false
        required: false
        desc: |
          Enable enforcement of quotas.  Quotas can be set from the Admin interface.

      expose_dataset_path:
        type: bool
        default: false
        required: false
        desc: |
          This option allows users to see the full path of datasets via the "View
          Details" option in the history. This option also exposes the command line to
          non-administrative users. Administrators can always see dataset paths.

      expose_potentially_sensitive_job_metrics:
        type: bool
        default: false
        required: false
        desc: |
          This option allows users to see the job metrics (except for environment
          variables).

      enable_legacy_sample_tracking_api:
        type: bool
        default: false
        required: false
        desc: |
          Enable the API for sample tracking

      enable_data_manager_user_view:
        type: bool
        default: false
        required: false
        desc: |
          Allow non-admin users to view available Data Manager options.

      data_manager_config_file:
        type: str
        default: config/data_manager_conf.xml
        required: false
        desc: |
          File where Data Managers are configured (.sample used if default does not
          exist).

      shed_data_manager_config_file:
        type: str
        default: shed_data_manager_conf.xml
        required: false
        desc: |
          File where Tool Shed based Data Managers are configured. This file will be created
          automatically upon data manager installation.

          The value of this option will be resolved with respect to <mutable_config_dir>.

      galaxy_data_manager_data_path:
        type: str
        required: false
        desc: |
          Directory to store Data Manager based tool-data. Defaults to the value of the
          <tool_data_path> option.

      job_config_file:
        type: str
        default: config/job_conf.xml
        required: false
        desc: |
          To increase performance of job execution and the web interface, you can
          separate Galaxy into multiple processes.  There are more than one way to do
          this, and they are explained in detail in the documentation:

            https://docs.galaxyproject.org/en/master/admin/scaling.html

          By default, Galaxy manages and executes jobs from within a single process and
          notifies itself of new jobs via in-memory queues.  Jobs are run locally on
          the system on which Galaxy is started.  Advanced job running capabilities can
          be configured through the job configuration file.

      job_config:
        !include job_config_schema.yml

      dependency_resolvers:
        type: seq
        sequence:
          - type: any
        desc: |
          Rather than specifying a dependency_resolvers_config_file, the definition of the
          resolvers to enable can be embedded into Galaxy's config with this option.
          This has no effect if a dependency_resolvers_config_file is used.

      dependency_resolution:
        type: map
        desc: |
          Alternative representation of various dependency resolution parameters. Takes the
          dictified version of a DependencyManager object - so this is ideal for automating the
          configuration of dependency resolution from one application that uses a DependencyManager
          to another.
        mapping:
          cache:
            type: bool
            default: false
            desc: See description of 'use_cached_dependency_manager'.
          precache:
            type: bool
            default: true
            desc: See description of 'precache_dependencies'.
          cache_dir:
            type: str
            default: '<tool_dependency_cache_dir>/_cache'
            desc: See description of 'tool_dependency_cache_dir'.
          default_base_path:
            type: str
            default: database/dependencies
            desc: See description of 'tool_dependency_dir'.
          resolvers:
            desc: See description of 'dependency_resolvers'.

      default_job_resubmission_condition:
        type: str
        required: false
        desc: |
          When jobs fail due to job runner problems, Galaxy can be configured to retry
          these or reroute the jobs to new destinations. Very fine control of this is
          available with resubmit declarations in job_conf.xml. For simple deployments
          of Galaxy though, the following attribute can define resubmission conditions
          for all job destinations. If any job destination defines even one
          resubmission condition explicitly in job_conf.xml - the condition described
          by this option will not apply to that destination. For instance, the condition:
          'attempt < 3 and unknown_error and (time_running < 300 or time_since_queued < 300)'
          would retry up to two times jobs that didn't fail due to detected memory or
          walltime limits but did fail quickly (either while queueing or running). The
          commented out default below results in no default job resubmission condition,
          failing jobs are just failed outright.

      track_jobs_in_database:
        type: bool
        default: true
        required: false
        desc: |
          This option is deprecated, use the `mem-self` handler assignment option in the
          job configuration instead.

      use_tasked_jobs:
        type: bool
        default: false
        required: false
        desc: |
          This enables splitting of jobs into tasks, if specified by the particular tool
          config.
          This is a new feature and not recommended for production servers yet.

      local_task_queue_workers:
        type: int
        default: 2
        required: false
        desc: |
          This enables splitting of jobs into tasks, if specified by the particular tool
          config.
          This is a new feature and not recommended for production servers yet.

      enable_job_recovery:
        type: bool
        default: true
        required: false
        desc: |
          Enable job recovery (if Galaxy is restarted while cluster jobs are running,
          it can "recover" them when it starts).  This is not safe to use if you are
          running more than one Galaxy server using the same database.

      retry_metadata_internally:
        type: bool
        default: true
        required: false
        desc: |
          Although it is fairly reliable, setting metadata can occasionally fail.  In
          these instances, you can choose to retry setting it internally or leave it in
          a failed state (since retrying internally may cause the Galaxy process to be
          unresponsive).  If this option is set to false, the user will be given the
          option to retry externally, or set metadata manually (when possible).

      max_metadata_value_size:
        type: int
        default: 5242880
        required: false
        desc: |
          Very large metadata values can cause Galaxy crashes.  This will allow
          limiting the maximum metadata key size (in bytes used in memory, not the end
          result database value size) Galaxy will attempt to save with a dataset.  Use
          0 to disable this feature.  The default is 5MB, but as low as 1MB seems to be
          a reasonable size.

      outputs_to_working_directory:
        type: bool
        default: false
        required: false
        desc: |
          This option will override tool output paths to write outputs to the job
          working directory (instead of to the file_path) and the job manager will move
          the outputs to their proper place in the dataset directory on the Galaxy
          server after the job completes. This is necessary (for example) if jobs run
          on a cluster and datasets can not be created by the user running the jobs (e.g.
          if the filesystem is mounted read-only or the jobs are run by a different
          user than the galaxy user).

      retry_job_output_collection:
        type: int
        default: 0
        required: false
        desc: |
          If your network filesystem's caching prevents the Galaxy server from seeing
          the job's stdout and stderr files when it completes, you can retry reading
          these files.  The job runner will retry the number of times specified below,
          waiting 1 second between tries.  For NFS, you may want to try the -noac mount
          option (Linux) or -actimeo=0 (Solaris).

      preserve_python_environment:
        type: str
        default: legacy_only
        required: false
        desc: |
          In the past Galaxy would preserve its Python environment when running jobs (
          and still does for internal tools packaged with Galaxy). This behavior exposes
          Galaxy internals to tools and could result in problems when activating
          Python environments for tools (such as with Conda packaging). The default
          legacy_only will restrict this behavior to tools identified by the Galaxy
          team as requiring this environment. Set this to "always" to restore the
          previous behavior (and potentially break Conda dependency resolution for many
          tools). Set this to legacy_and_local to preserve the environment for legacy
          tools and locally managed tools (this might be useful for instance if you are
          installing software into Galaxy's virtualenv for tool development).

      cleanup_job:
        type: str
        default: always
        required: false
        reloadable: true
        desc: |
          Clean up various bits of jobs left on the filesystem after completion.  These
          bits include the job working directory, external metadata temporary files,
          and DRM stdout and stderr files (if using a DRM).  Possible values are:
          always, onsuccess, never

      drmaa_external_runjob_script:
        type: str
        required: false
        desc: |
          When running DRMAA jobs as the Galaxy user
          (https://docs.galaxyproject.org/en/master/admin/cluster.html#submitting-jobs-as-the-real-user)
          this script is used to run the job script Galaxy generates for a tool execution.

          Example value 'sudo -E scripts/drmaa_external_runner.py --assign_all_groups'

      drmaa_external_killjob_script:
        type: str
        required: false
        desc: |
          When running DRMAA jobs as the Galaxy user
          (https://docs.galaxyproject.org/en/master/admin/cluster.html#submitting-jobs-as-the-real-user)
          this script is used to kill such jobs by Galaxy (e.g. if the user cancels
          the job).

          Example value 'sudo -E scripts/drmaa_external_killer.py'

      external_chown_script:
        type: str
        required: false
        desc: |
          When running DRMAA jobs as the Galaxy user
          (https://docs.galaxyproject.org/en/master/admin/cluster.html#submitting-jobs-as-the-real-user)
          this script is used transfer permissions back and forth between the Galaxy user
          and the user that is running the job.

          Example value 'sudo -E scripts/external_chown_script.py'

      real_system_username:
        type: str
        default: user_email
        required: false
        desc: |
          When running DRMAA jobs as the Galaxy user
          (https://docs.galaxyproject.org/en/master/admin/cluster.html#submitting-jobs-as-the-real-user)
          Galaxy can extract the user name from the email address (actually the local-part before the @)
          or the username which are both stored in the Galaxy data base.
          The latter option is particularly useful for installations that get the
          authentication from LDAP.
          Also, Galaxy can accept the name of a common system user (eg. galaxy_worker)
          who can run every job being submitted. This user should not be the same user
          running the galaxy system.
          Possible values are user_email (default), username or <common_system_user>

      environment_setup_file:
        type: str
        required: false
        desc: |
          File to source to set up the environment when running jobs.  By default, the
          environment in which the Galaxy server starts is used when running jobs
          locally, and the environment set up per the DRM's submission method and
          policy is used when running jobs on a cluster (try testing with `qsub` on the
          command line).  environment_setup_file can be set to the path of a file on
          the cluster that should be sourced by the user to set up the environment
          prior to running tools.  This can be especially useful for running jobs as
          the actual user, to remove the need to configure each user's environment
          individually.

      enable_beta_markdown_export:
        type: bool
        default: false
        required: false
        desc: |
          Enable export of Galaxy Markdown documents (pages and workflow reports)
          to PDF. Requires manual installation and setup of weasyprint (latest version
          available for Python 2.7 is 0.42).

      markdown_export_css:
        type: str
        default: markdown_export.css
        required: false
        desc: |
          CSS file to apply to all Markdown exports to PDF - currently used by
          WeasyPrint during rendering an HTML export of the document to PDF.

      markdown_export_css_pages:
        type: str
        default: markdown_export_pages.css
        required: false
        desc: |
          CSS file to apply to "Galaxy Page" exports to PDF. Generally prefer 
          markdown_export_css, but this is here for deployments that
          would like to tailor different kinds of exports.

      markdown_export_css_invocation_reports:
        type: str
        default: markdown_export_invocation_reports.css
        required: false
        desc: |
          CSS file to apply to invocation report exports to PDF. Generally prefer 
          markdown_export_css, but this is here for deployments that
          would like to tailor different kinds of exports.

      markdown_export_prologue:
        type: str
        default: ''
        desc: |
          Prologue Markdown/HTML to apply to markdown exports to PDF. Allowing
          branded headers.

      markdown_export_epilogue:
        type: str
        default: ''
        desc: |
          Prologue Markdown/HTML to apply to markdown exports to PDF. Allowing
          branded footers.

      markdown_export_prologue_pages:
        type: str
        default: ''
        desc: |
          Alternative to markdown_export_prologue that applies just to page exports.

      markdown_export_prologue_invocation_reports:
        type: str
        default: ''
        desc: |
          Alternative to markdown_export_prologue that applies just to invocation report
          exports.

      markdown_export_epilogue_pages:
        type: str
        default: ''
        desc: |
          Alternative to markdown_export_epilogue that applies just to page exports.

      markdown_export_epilogue_invocation_reports:
        type: str
        default: ''
        desc: |
          Alternative to markdown_export_epilogue that applies just to invocation report
          exports.

      job_resource_params_file:
        type: str
        default: job_resource_params_conf.xml
        required: false
        desc: |
          Optional file containing job resource data entry fields definition.
          These fields will be presented to users in the tool forms and allow them to
          overwrite default job resources such as number of processors, memory and
          walltime.

          The value of this option will be resolved with respect to <config_dir>.

      workflow_resource_params_file:
        type: str
        default: workflow_resource_params_conf.xml
        required: false
        desc: |
          Similar to the above parameter, workflows can describe parameters used to
          influence scheduling of jobs within the workflow. This requires both a description
          of the fields available (which defaults to the definitions in
          job_resource_params_file if not set).

          The value of this option will be resolved with respect to <config_dir>.

      workflow_resource_params_mapper:
        type: str
        default: config/workflow_resource_mapper_conf.yml
        required: false
        desc: |
          This parameter describes how to map users and workflows to a set of workflow
          resource parameter to present (typically input IDs from workflow_resource_params_file).
          If this this is a function reference it will be passed various inputs (workflow model
          object and user) and it should produce a list of input IDs. If it is a path
          it is expected to an XML or YAML file describing how to map group names to parameter
          descriptions (additional types of mappings via these files could be implemented but
          haven't yet - for instance using workflow tags to do the mapping).

      workflow_schedulers_config_file:
        type: str
        default: workflow_schedulers_conf.xml
        required: false
        desc: |
          Optional configuration file similar to `job_config_file` to specify
          which Galaxy processes should schedule workflows.

          The value of this option will be resolved with respect to <config_dir>.

      cache_user_job_count:
        type: bool
        default: false
        required: false
        desc: |
          If using job concurrency limits (configured in job_config_file), several
          extra database queries must be performed to determine the number of jobs a
          user has dispatched to a given destination.  By default, these queries will
          happen for every job that is waiting to run, but if cache_user_job_count is
          set to true, it will only happen once per iteration of the handler queue.
          Although better for performance due to reduced queries, the trade-off is a
          greater possibility that jobs will be dispatched past the configured limits
          if running many handlers.

      tool_filters:
        type: str
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that admins may use to restrict the tools to display.

      tool_label_filters:
        type: str
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that admins may use to restrict the tool labels to display.

      tool_section_filters:
        type: str
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that admins may use to restrict the tool sections to display.

      user_tool_filters:
        type: str
        default: examples:restrict_upload_to_admins, examples:restrict_encode
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that users may use to restrict the tools to display.

      user_tool_section_filters:
        type: str
        default: examples:restrict_text
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that users may use to restrict the tool sections to display.

      user_tool_label_filters:
        type: str
        default: examples:restrict_upload_to_admins, examples:restrict_encode
        required: false
        desc: |
          Define toolbox filters (https://galaxyproject.org/user-defined-toolbox-filters/)
          that users may use to restrict the tool labels to display.

      toolbox_filter_base_modules:
        type: str
        default: galaxy.tools.filters,galaxy.tools.toolbox.filters
        required: false
        desc: |
          The base module(s) that are searched for modules for toolbox filtering
          (https://galaxyproject.org/user-defined-toolbox-filters/) functions.

      amqp_internal_connection:
        type: str
        default: sqlalchemy+sqlite:///./database/control.sqlite?isolation_level=IMMEDIATE
        required: false
        desc: |
          Galaxy uses AMQP internally for communicating between processes.  For
          example, when reloading the toolbox or locking job execution, the process
          that handled that particular request will tell all others to also reload,
          lock jobs, etc.
          For connection examples, see http://docs.celeryproject.org/projects/kombu/en/latest/userguide/connections.html

          Without specifying anything here, galaxy will first attempt to use your
          specified database_connection above.  If that's not specified either, Galaxy
          will automatically create and use a separate sqlite database located in your
          <galaxy>/database folder (indicated in the commented out line below).

      enable_communication_server:
        type: bool
        default: false
        required: false
        desc: |
          Galaxy real time communication server settings

      communication_server_host:
        type: str
        default: http://localhost
        required: false
        desc: |
          Galaxy real time communication server settings

      communication_server_port:
        type: int
        default: 7070
        required: false
        desc: |
          Galaxy real time communication server settings

      persistent_communication_rooms:
        type: str
        required: false
        desc: |
          persistent_communication_rooms is a comma-separated list of rooms that should be always available.

      use_pbkdf2:
        type: bool
        default: true
        required: false
        desc: |
          Allow disabling pbkdf2 hashing of passwords for legacy situations.
          This should normally be left enabled unless there is a specific
          reason to disable it.

      cookie_domain:
        type: str
        required: false
        desc: |
          Tell Galaxy that multiple domains sharing the same root are associated
          to this instance and wants to share the same session cookie.
          This allow a user to stay logged in when passing from one subdomain
          to the other.
          This root domain will be written in the unique session cookie shared
          by all subdomains.

      select_type_workflow_threshold:
        type: int
        default: -1
        required: false
        desc: |
          Due to performance considerations (select2 fields are pretty 'expensive' in terms of memory usage)
          Galaxy uses the regular select fields for non-dataset selectors in the workflow run form.
          use 0 in order to always use select2 fields,
          use -1 (default) in order to always use the regular select fields,
          use any other positive number as threshold (above threshold: regular select fields will be used)
