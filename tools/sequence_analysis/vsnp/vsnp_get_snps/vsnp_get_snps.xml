<tool id="vsnp_get_snps" name="vSNP: get snps" version="1.0.0">
    <description></description>
    <requirements>
        <requirement type="package" version="0.24.2">pandas</requirement>
        <requirement type="package" version="0.6.8">pyvcf</requirement>
        <requirement type="package" version="1.2.0">xlrd</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
#import re
#set input_vcf_dir = 'input_vcf_dir'
#set input_zc_vcf_dir = 'input_zc_vcf_dir'
#set input_zc_vcf_type = $input_zc_vcf_type_cond.input_zc_vcf_type
#set input_zc_vcf_type = $input_zc_vcf_type_cond.input_zc_vcf_type
#set output_json_snps_dir = 'output_json_snps_dir'
#set output_snps_dir = 'output_snps_dir'
mkdir -p $input_vcf_dir &&
mkdir -p $input_zc_vcf_dir &&
mkdir -p $output_json_snps_dir &&
mkdir -p $output_snps_dir &&
#set reference = '?'
#for $i in $input_vcf_collection:
    #set reference = $i.metadata.dbkey
    #set filename = $i.file_name
    #set name = $i.name
    ln -s $filename $input_vcf_dir/$name &&
#end for
#if $input_zc_vcf_type == "single":
    #set input_zc_vcf_identifier = re.sub('[^\s\w\-]', '_', str($input_zc_vcf.element_identifier))
    ln -s '${input_zc_vcf}' '$input_zc_vcf_dir/${input_zc_vcf_identifier}' &&
#else
    #for $i in $input_zc_vcf_type_cond.input_zc_vcf_collection:
        #set filename = $i.file_name
        #set name = $i.name
        ln -s $filename $input_zc_vcf_dir/$name &&
    #end for
#end if
#if str($excel_grouper_cond.excel_grouper) == "yes":
    #set excel_grouper_source = $excel_grouper_cond.excel_grouper_source_cond.excel_grouper_source
    #if str($excel_grouper_source) == "cached":
        #set excel_fields = $__app__.tool_data_tables['vsnp_excel'].get_fields()
        #for $i in $excel_fields:
            #if str($i[0]) == $reference:
                #set excel_file = $i[2]
                #break
            #end if
        #end for
    #end if
#else:
    #set excel_file = $excel_grouper_cond.excel_grouper_source_cond.excel_grouper_file
#end if
#if str($gbk_cond.gbk_param) == "yes":
    #set gbk_source_cond = $gbk_cond.gbk_source_cond
    #set gbk_source = $gbk_source_cond.gbk_source
    #if str($gbk_source) == "cached":
        #set gbk_fields = $__app__.tool_data_tables['vsnp_genbank'].get_fields()
        #for $i in $gbk_fields:
            #if str($i[0]) == $reference:
                #set genbank_file = $i[2]
                #break
            #end if
        #end for
    #end if
#else:
    #set genbank_file = $gbk_cond.gbk_source_cond.gbk_file
#end if
python '$__tool_directory__/vsnp_get_snps.py'
--reference '$reference'
#if str($excel_grouper_cond.excel_grouper) == "yes":
    --excel_grouper_file '$excel_file'
#else:
    --output_fasta '$output_fasta'
    --output_json_snps '$output_json_snps'
#end if
#if str($gbk_cond.gbk_param) == "yes":
    --gbk_file '$genbank_file'
#end if
#if str($all_isolates) == "TRUE":
    --all_isolates '$all_isolates'
#end if
#if str($filter_finder) == "TRUE":
    --filter_finder '$filter_finder'
#end if
#if str($no_filters) == "TRUE":
    --no_filters '$no_filters'
#end if
#if str($subset) == "TRUE":
    --subset '$subset'
#end if
--output_json_avg_mq '$output_json_avg_mq'
--output_log '$output_log'
]]></command>
    <inputs>
        <conditional name="input_zc_vcf_type_cond">
            <param name="input_zc_vcf_type" type="select" label="Choose the type for the zero coverage VCF files to be analyzed">
                <option value="single" selected="true">A single zero coverage VCF file</option>
                <option value="collection">A collection of zero coverage VCF files</option>
            </param>
            <when value="single">
                <param name="input_zc_vcf" type="data" format="vcf" label="Zero coverage VCF file">
                    <validator type="unspecified_build"/>
                </param>
            </when>
            <when value="collection">
                <param name="input_zc_vcf_collection" format="vcf" type="data_collection" collection_type="list" label="Collection of zero coverage VCF files">
                    <validator type="unspecified_build"/>
                </param>
            </when>
        </conditional>
        <param name="input_vcf_collection" format="vcf" type="data_collection" collection_type="list" label="Collection of VCF files against which to analyze the zero coverages VCF file(s)">
            <validator type="unspecified_build"/>
        </param>
        <conditional name="excel_grouper_cond">
            <param name="excel_grouper" type="select" label="Use Excel file for grouping and filtering?">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <conditional name="excel_grouper_source_cond">
                    <param name="excel_grouper_source" type="select" label="Choose the source for the Excel file">
                        <option value="cached">locally cached</option>
                        <option value="history">from history</option>
                    </param>
                    <when value="cached">
                        <param name="excel_grouper_file" type="select" label="Excel file" help="Selection will be overridden if it does not match the dbkeys associated with the collection of VCF files being analyzed">
                            <options from_data_table="vsnp_excel"/>
                            <validator type="no_options" message="No built-in Excel grouping and filtering datasets are available"/>
                        </param>
                    </when>
                    <when value="history">
                        <param name="excel_grouper_file" type="data" format="xlsx" label="Excel file">
                            <validator type="no_options" message="The current history does not include an xlsx dataset that can be used for grouping and filtering"/>
                        </param>
                    </when>
                </conditional>
            </when>
            <when value="no"/>
        </conditional>
        <conditional name="gbk_cond">
            <param name="gbk_param" type="select" label="Use Genbank file?">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <conditional name="gbk_source_cond">
                    <param name="gbk_source" type="select" label="Choose the source for the Genbank file">
                        <option value="cached">locally cached</option>
                        <option value="history">from history</option>
                    </param>
                    <when value="cached">
                        <param name="gbk_file" type="select" label="Genbank file" help="Selection will be overridden if it does not match the dbkeys associated with the collection of VCF files being analyzed">
                            <options from_data_table="vsnp_genbank"/>
                            <validator type="no_options" message="No built-in Genbank files are available"/>
                        </param>
                    </when>
                    <when value="history">
                        <param name="gbk_file" type="data" format="genbank" label="Genbank file">
                            <validator type="no_options" message="The current history does not include a genbank dataset"/>
                        </param>
                    </when>
                </conditional>
            </when>
            <when value="no"/>
        </conditional>
        <!-- TODO: handle the following when we hear back from Tod
        <param argument="all_isolates" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Create table with all isolates"/>
        <param argument="filter_finder" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Ouput potential positions to filter"/>
        <param argument="no_filters" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Don't apply and filters"/>
        <param argument="subset" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Create trees with a subset of samples that represent the whole"/>
        -->
    </inputs>
    <outputs>
        <collection name="snps" type="list" label="${tool.name} (SNPs) on ${on_string}">
            <discover_datasets pattern="__name__" directory="output_snps_dir" format="fasta" />
            <filter>excel_grouper_cond['excel_grouper'] == 'yes'</filter>
        </collection>
        <data name="output_fasta" format="fasta" label="${tool.name} (SNPs) on ${on_string}">
            <filter>excel_grouper_cond['excel_grouper'] == 'no'</filter>
        </data>
        <collection name="json_snps" type="list" label="${tool.name} (SNPs as json) on ${on_string}">
            <discover_datasets pattern="__name__" directory="output_json_snps_dir" format="json" />
            <filter>excel_grouper_cond['excel_grouper'] == 'yes'</filter>
        </collection>
        <data name="output_json_snps" format="json" label="${tool.name} (SNPs as json) on ${on_string}">
            <filter>excel_grouper_cond['excel_grouper'] == 'no'</filter>
        </data>
        <data name="output_json_avg_mq" format="json" label="${tool.name} (avg mq as json) on ${on_string}"/>
        <data name="output_log" format="txt" label="${tool.name} (process log) on ${on_string}"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help>
**What it does**

Collects quality parsimonious SNPs from VCF files and produces a collection of alignment files in FASTA format.
    </help>
    <citations>
        <citation>
        </citation>
    </citations>
</tool>

