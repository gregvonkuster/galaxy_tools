<tool id="vsnp_get_snps" name="vSNP: get snps" version="1.0.0">
    <description></description>
    <requirements>
        <requirement type="package" version="1.76">biopython</requirement>
        <requirement type="package" version="0.24.2">pandas</requirement>
        <requirement type="package" version="0.6.8">pyvcf</requirement>
        <requirement type="package" version="1.2.0">xlrd</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
mkdir -p snps &&
python '$__tool_directory__/vsnp_get_snps.py'
--zero_coverage_vcf_input '$zero_coverage_vcf_input.file_name'
#if str($reference_cond.reference_source) == "cached"
    --reference '$reference_cond.reference.fields.path'
#else:
    --reference '$reference_cond.reference'
#end if
#if str($excel_filter_cond.excel_filter) == "yes":
    --excel_filter_file '$excel_filter_cond.excel_filter_file'
#else:
    --output_fasta '$output_fasta'
#end if
#if str($gbk_file_cond.gbk_file_param) == "yes":
    --gbk_file '$gbk_file_cond.gbk_file'
#end if
#if str($all_isolates) == "TRUE":
    --all_isolates '$all_isolates'
#end if
#if str($filter_finder) == "TRUE":
    --filter_finder '$filter_finder'
#end if
#if str($no_filters) == "TRUE":
    --no_filters '$no_filters'
#end if
#if str($subset) == "TRUE":
    --subset '$subset'
#end if
--output_log '$output_log'
]]></command>
    <inputs>
        <param name="zero_coverage_vcf_input" type="data" format="vcf" label="Zero coverage VCF file">
            <validator type="unspecified_build" />
        </param>
        <conditional name="reference_cond">
            <param name="reference_source" type="select" label="Choose the source for the reference genome">
                <option value="cached">locally cached</option>
                <option value="history">from history</option>
            </param>
            <when value="cached">
                <param name="reference" type="select" label="Using reference genome">
                    <options from_data_table="fasta_indexes"/>
                    <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected BAM input file"/>
                </param>
            </when>
            <when value="history">
                <param name="reference" type="data" format="fasta" label="Using reference genome">
                    <validator type="no_options" message="The current history does not include a fasta dataset with the build associated with the selected BAM input file"/>
                </param>
            </when>
        </conditional>
        <conditional name="excel_filter_cond">
            <param name="excel_filter" type="select" label="Use Excel filter?">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param name="excel_filter_file" type="data" format="xlsx" optional="true" label="Excel filter file"/>
            </when>
            <when value="no"/>
        </conditional>
        <conditional name="gbk_file_cond">
            <param name="gbk_file_param" type="select" label="Use Genbank file?">
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param name="gbk_file" type="data" format="genbank" optional="true" label="Genbank file"/>
            </when>
            <when value="no"/>
        </conditional>
        <param argument="all_isolates" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Create table with all isolates"/>
        <param argument="filter_finder" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Ouput potential positions to filter"/>
        <param argument="no_filters" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Don't apply and filters"/>
        <param argument="subset" type="boolean" checked="false" truevalue="TRUE" falsevalue="FALSE" label="Create trees with a subset of samples that represent the whole"/>
    </inputs>
    <outputs>
        <data name="output_fasta" format="fasta" label="${tool.name} (quality parsimonious SNPs) on ${on_string}">
            <filter>excel_filter_cond['excel_filter'] == 'no'</filter>
        </data>
        <collection name="snps" type="list" label="${tool.name} (quality parsimonious SNPs) on ${on_string}">
            <discover_datasets pattern="__name__" directory="snps" format="fasta" />
            <filter>excel_filter_cond['excel_filter'] == 'yes'</filter>
        </collection>
        <data name="output_log" format="txt" label="${tool.name} (process log) on ${on_string}"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help>
**What it does**

Collects quality parsimonious SNPs from VCF files and produces a collection of alignment files in FASTA format.
    </help>
    <citations>
        <citation>
        </citation>
    </citations>
</tool>

