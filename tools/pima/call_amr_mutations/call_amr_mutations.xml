<tool id="call_amr_mutations" name="PIMA: call AMR mutations" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description></description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
#import os

#if $os.path.getsize(str($varscan_raw)) > 0:
    cat '$varscan_raw' | awk '(NR > 1 && $9 == 2 && $5 + $6 >= 15){OFS = "\t";f = $6 / ($5 + $6); gsub(/.*\//, "", $4);s = $4;gsub(/[+\\-]/, "", s);$7 = sprintf("%.2f%%", f * 100);min = 1 / log(length(s) + 2) / log(10) + 2/10;if(f > min){print}}' > varscan_snp &&
    cat varscan_snp | awk '{OFS = "\t"; print $1,$2,".",$3,$4,-log($14),"PASS",".","GT","1|1"}' > snp_vcf &&
    cat snp_vcf | sort -k 1,1 -k 2n,2n | awk 'BEGIN{OFS = "\t";print "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tSAMPLE"}{print}' > '$varscan_vcf'
#end if
]]></command>
    <inputs>
        <param name="varscan_raw" type="data" format="vcf" label="Raw varscan VCF file"/>
        <param name="mutation_regions" type="data" format="bed" label="AMR mutation regions BED file"/>
    </inputs>
    <outputs>
        <data name="varscan_vcf" format="vcf"/>
    </outputs>
    <tests>
        <test>
            <param name="varscan_raw" value="input1.vcf" ftype="vcf"/>
            <param name="mutation_regions" value="mutation_regions.bed" ftype="bed"/>
            <output name="varscan_vcf" value="output1.vcf" ftype="vcf"/>
        </test>
    </tests>
    <help>
**What it does**

Accepts VarScan mpileup2snps file, filters them, and produces a VCF file.
    </help>
    <expand macro="citations"/>
</tool>

