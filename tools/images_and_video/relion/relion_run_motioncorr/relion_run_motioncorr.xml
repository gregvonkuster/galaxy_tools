<tool id="relion_run_motioncorr" name="Relion: motion correction" version="1.0.0">
    <description>for whole-frame movie alignment</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="3.1.1">relion</requirement>
 </requirements>
    <command detect_errors="exit_code"><![CDATA[
#import os
#import re

mkdir '${output_star.files_path}' &&

## Attempt to retain the meaningful file names for
## the inputs (i.e., don't use the Galaxy standard
## dataset_xxx.dat name).  STAR files keep these
## named inputs in the files_path associated with
## the dataset.
#if str($input_type_cond.input_type) == 'single':
    ## Process the STAR file which uses the
    ## Galaxy naming convention of dataset_x.dat.
    #set star_identifier = $os.path.splitext($os.path.basename($input_type_cond.input.file_name))[0] + '.star'
    ln -s '${input_type_cond.input}' '${star_identifier}' &&

    ## Process the image (e.g., tiff) files that
    ## are located in the extra_files_path.
    #for $i in $os.listdir($input_type_cond.input.extra_files_path):
        ln -s '$os.path.join($input_type_cond.input.extra_files_path, $i)' '$i' &&
    #end for
#else:
    ## Process a collection of  STAR file which
    ## use the Galaxy naming convention of dataset_x.dat.

    #for $i in $input_type_cond.input_collection:
        #set star_identifier = $os.path.splitext($i.element_identifier)[0] + '.star'
        ln -s '${i}' '${star_identifier}' &&

        ## Process the image (e.g., tiff) files that
        ## are located in the extra_files_path.
        #for $j in $os.listdir($i.files_path):
            ln -s '${j}' . &&
        #end for
    #end for
#end if

relion_run_motioncorr
#if str($input_type_cond.input_type) == 'single':
    --i '${star_identifier}'
#else:
    --i '*.star'
#end if
--o .
--use_own
&>'$output_log';
if [[ $? -ne 0 ]]; then
    exit 1;
else
    mv 'corrected_micrographs.star' '$output_star';
    mv 'logfile.pdf' '$output_pdf';
    mv *.mrc '$output_star.files_path';
    rm '$star_identifier';
    mv *.star '$output_star.files_path';
    cat *.log >> '$output_log';
fi
]]></command>
    <inputs>
        <conditional name="input_type_cond">
            <param name="input_type" type="select" label="Choose the category of the files to be analyzed">
                <option value="single" selected="true">Single dataset</option>
                <option value="collection">Dataset collection</option>
            </param>
            <when value="single">
                <param name="input" type="data" format="star" label="Image file"/>
            </when>
            <when value="collection">
                <param name="input_collection" format="mrc2014,star,tif,tiff" type="data_collection" collection_type="list" label="Collection of image files"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="output_log" format="txt" label="${tool.name} on ${on_string} (process log)"/>
        <data name="output_star" format="star" label="${tool.name} on ${on_string} (star)"/>
        <data name="output_pdf" format="pdf" label="${tool.name} on ${on_string} (pdf)"/>
    </outputs>
    <tests>
        <test expect_num_outputs="3">
            <param name="input" value="1.star" ftype="tiff"/>
            <output name="output_star" value="output_star.star" ftype="star"/>
            <output name="output_log" file="output_log2.txt" ftype="txt"/>
        </test>
    </tests>
    <help>
**What it does**

iAccepts a STAR file with all input micrographs, or a Linux wildcard with all micrographs to operate on and outputs a
whole-frame movie alignment.
    </help>
    <expand macro="citations"/>
</tool>

